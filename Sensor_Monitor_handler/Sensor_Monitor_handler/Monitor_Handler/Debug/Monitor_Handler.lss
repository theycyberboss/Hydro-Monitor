
Monitor_Handler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00002dd2  00002e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ab  008001cc  008001cc  00002f32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000828  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011ebe  00000000  00000000  000037f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b29  00000000  00000000  000156b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004031  00000000  00000000  000181df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001924  00000000  00000000  0001c210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034aa  00000000  00000000  0001db34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c5e  00000000  00000000  00020fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  00029c3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__dtors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_16>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__vector_18>
      4c:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__vector_19>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_24>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27                                               ='

0000019d <digital_pin_to_timer_PGM>:
     19d:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     1ad:	00 00 00 00                                         ....

000001b1 <digital_pin_to_bit_mask_PGM>:
     1b1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1c1:	04 08 10 20                                         ... 

000001c5 <digital_pin_to_port_PGM>:
     1c5:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1d5:	03 03 03 03                                         ....

000001d9 <port_to_output_PGM>:
     1d9:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001e3 <port_to_mode_PGM>:
     1e3:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000001ee <__ctors_start>:
     1ee:	ae 03       	fmulsu	r18, r22
     1f0:	4f 07       	cpc	r20, r31
     1f2:	c4 0d       	add	r28, r4

000001f4 <__ctors_end>:
     1f4:	d6 03       	fmuls	r21, r22

000001f6 <__dtors_end>:
     1f6:	11 24       	eor	r1, r1
     1f8:	1f be       	out	0x3f, r1	; 63
     1fa:	cf ef       	ldi	r28, 0xFF	; 255
     1fc:	d8 e0       	ldi	r29, 0x08	; 8
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_copy_data>:
     202:	11 e0       	ldi	r17, 0x01	; 1
     204:	a0 e0       	ldi	r26, 0x00	; 0
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	e2 ed       	ldi	r30, 0xD2	; 210
     20a:	fd e2       	ldi	r31, 0x2D	; 45
     20c:	02 c0       	rjmp	.+4      	; 0x212 <__do_copy_data+0x10>
     20e:	05 90       	lpm	r0, Z+
     210:	0d 92       	st	X+, r0
     212:	ac 3c       	cpi	r26, 0xCC	; 204
     214:	b1 07       	cpc	r27, r17
     216:	d9 f7       	brne	.-10     	; 0x20e <__do_copy_data+0xc>

00000218 <__do_clear_bss>:
     218:	23 e0       	ldi	r18, 0x03	; 3
     21a:	ac ec       	ldi	r26, 0xCC	; 204
     21c:	b1 e0       	ldi	r27, 0x01	; 1
     21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
     220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
     222:	a7 37       	cpi	r26, 0x77	; 119
     224:	b2 07       	cpc	r27, r18
     226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>

00000228 <__do_global_ctors>:
     228:	10 e0       	ldi	r17, 0x00	; 0
     22a:	ca ef       	ldi	r28, 0xFA	; 250
     22c:	d0 e0       	ldi	r29, 0x00	; 0
     22e:	04 c0       	rjmp	.+8      	; 0x238 <__do_global_ctors+0x10>
     230:	21 97       	sbiw	r28, 0x01	; 1
     232:	fe 01       	movw	r30, r28
     234:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__tablejump2__>
     238:	c7 3f       	cpi	r28, 0xF7	; 247
     23a:	d1 07       	cpc	r29, r17
     23c:	c9 f7       	brne	.-14     	; 0x230 <__do_global_ctors+0x8>
     23e:	0e 94 7d 07 	call	0xefa	; 0xefa <main>
     242:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__do_global_dtors>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <_Z11initDisplayv>:
   digitalWrite(SYNCH_PIN,LOW);
}

void initDisplay()
{
	lcd.begin();
     24a:	8b ef       	ldi	r24, 0xFB	; 251
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN17LiquidCrystal_I2C5beginEv>
	lcd.backlight();
     252:	8b ef       	ldi	r24, 0xFB	; 251
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.setCursor(0,0);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	8b ef       	ldi	r24, 0xFB	; 251
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print("Starting Monitor");
     266:	6f e0       	ldi	r22, 0x0F	; 15
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	8b ef       	ldi	r24, 0xFB	; 251
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <_ZN5Print5printEPKc>

00000272 <setup>:



void setup() {

  pinMode(SYNCH_PIN,OUTPUT);
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	88 e0       	ldi	r24, 0x08	; 8
     276:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pinMode>
  
  initDisplay();
     27a:	0e 94 25 01 	call	0x24a	; 0x24a <_Z11initDisplayv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     27e:	26 e0       	ldi	r18, 0x06	; 6
     280:	40 e8       	ldi	r20, 0x80	; 128
     282:	55 e2       	ldi	r21, 0x25	; 37
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	87 e0       	ldi	r24, 0x07	; 7
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	0c 94 84 06 	jmp	0xd08	; 0xd08 <_ZN14HardwareSerial5beginEmh>

00000290 <_Z10printErrori>:
}

//Print out error codes, Codes are viewed at the top
void printError(int errorCode)
{
  if(errorCode == DATA_ERROR)
     290:	83 30       	cpi	r24, 0x03	; 3
     292:	91 05       	cpc	r25, r1
     294:	39 f4       	brne	.+14     	; 0x2a4 <_Z10printErrori+0x14>
  {
    lcd.clear();
     296:	8b ef       	ldi	r24, 0xFB	; 251
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd.print("DATA SYNCH ERROR");
     29e:	60 e2       	ldi	r22, 0x20	; 32
     2a0:	71 e0       	ldi	r23, 0x01	; 1
     2a2:	1c c0       	rjmp	.+56     	; 0x2dc <_Z10printErrori+0x4c>
    
  }else if(errorCode == TEMP_ERROR)
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	91 05       	cpc	r25, r1
     2a8:	39 f4       	brne	.+14     	; 0x2b8 <_Z10printErrori+0x28>
  {
    lcd.clear();
     2aa:	8b ef       	ldi	r24, 0xFB	; 251
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd.print("TEMP SENSOR ERROR");
     2b2:	61 e3       	ldi	r22, 0x31	; 49
     2b4:	71 e0       	ldi	r23, 0x01	; 1
     2b6:	12 c0       	rjmp	.+36     	; 0x2dc <_Z10printErrori+0x4c>
    
  }else if(errorCode == CONDUCT_ERROR)
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	39 f4       	brne	.+14     	; 0x2cc <_Z10printErrori+0x3c>
  {
    lcd.clear();
     2be:	8b ef       	ldi	r24, 0xFB	; 251
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd.print("COND. SENSOR ERROR");
     2c6:	63 e4       	ldi	r22, 0x43	; 67
     2c8:	71 e0       	ldi	r23, 0x01	; 1
     2ca:	08 c0       	rjmp	.+16     	; 0x2dc <_Z10printErrori+0x4c>
    
  }else if(errorCode == PH_ERROR)
     2cc:	89 2b       	or	r24, r25
     2ce:	51 f4       	brne	.+20     	; 0x2e4 <_Z10printErrori+0x54>
  {
    lcd.clear();
     2d0:	8b ef       	ldi	r24, 0xFB	; 251
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd.print("PH SENSOR ERROR");
     2d8:	66 e5       	ldi	r22, 0x56	; 86
     2da:	71 e0       	ldi	r23, 0x01	; 1
     2dc:	8b ef       	ldi	r24, 0xFB	; 251
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <_ZN5Print5printEPKc>
     2e4:	08 95       	ret

000002e6 <_Z14printToDisplayv>:
    
  }
}

void printToDisplay()
{
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	6e 97       	sbiw	r28, 0x1e	; 30
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
  //Convert all of readings into a printable string
  String sTemp = "TEMP: " + String(temp) + " " + temp_state_string;
     2fa:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <temp>
     2fe:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <temp+0x1>
     302:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <temp+0x2>
     306:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <temp+0x3>
     30a:	22 e0       	ldi	r18, 0x02	; 2
     30c:	ce 01       	movw	r24, r28
     30e:	07 96       	adiw	r24, 0x07	; 7
     310:	0e 94 90 0a 	call	0x1520	; 0x1520 <_ZN6StringC1Efh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     314:	66 e6       	ldi	r22, 0x66	; 102
     316:	71 e0       	ldi	r23, 0x01	; 1
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     320:	be 01       	movw	r22, r28
     322:	69 5f       	subi	r22, 0xF9	; 249
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	ce 01       	movw	r24, r28
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZplRK15StringSumHelperRK6String>
     32e:	67 e7       	ldi	r22, 0x77	; 119
     330:	71 e0       	ldi	r23, 0x01	; 1
     332:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZplRK15StringSumHelperPKc>
     336:	67 ee       	ldi	r22, 0xE7	; 231
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZplRK15StringSumHelperRK6String>
     33e:	bc 01       	movw	r22, r24
     340:	ce 01       	movw	r24, r28
     342:	49 96       	adiw	r24, 0x19	; 25
     344:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     348:	ce 01       	movw	r24, r28
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     350:	ce 01       	movw	r24, r28
     352:	07 96       	adiw	r24, 0x07	; 7
     354:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
  String sPh = "PH: " + String(ph) +  " " + ph_state_string;
     358:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <ph>
     35c:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <ph+0x1>
     360:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <ph+0x2>
     364:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <ph+0x3>
     368:	22 e0       	ldi	r18, 0x02	; 2
     36a:	ce 01       	movw	r24, r28
     36c:	07 96       	adiw	r24, 0x07	; 7
     36e:	0e 94 90 0a 	call	0x1520	; 0x1520 <_ZN6StringC1Efh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     372:	6d e6       	ldi	r22, 0x6D	; 109
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	ce 01       	movw	r24, r28
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     37e:	be 01       	movw	r22, r28
     380:	69 5f       	subi	r22, 0xF9	; 249
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZplRK15StringSumHelperRK6String>
     38c:	67 e7       	ldi	r22, 0x77	; 119
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZplRK15StringSumHelperPKc>
     394:	61 ee       	ldi	r22, 0xE1	; 225
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZplRK15StringSumHelperRK6String>
     39c:	bc 01       	movw	r22, r24
     39e:	ce 01       	movw	r24, r28
     3a0:	43 96       	adiw	r24, 0x13	; 19
     3a2:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     3a6:	ce 01       	movw	r24, r28
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     3ae:	ce 01       	movw	r24, r28
     3b0:	07 96       	adiw	r24, 0x07	; 7
     3b2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
  String sConductivity = "COND: " + String((int)(conductivity + 0.5));
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	5f e3       	ldi	r21, 0x3F	; 63
     3be:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <conductivity>
     3c2:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <conductivity+0x1>
     3c6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <conductivity+0x2>
     3ca:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <conductivity+0x3>
     3ce:	0e 94 87 04 	call	0x90e	; 0x90e <__addsf3>
     3d2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fixsfsi>
     3d6:	4a e0       	ldi	r20, 0x0A	; 10
     3d8:	ce 01       	movw	r24, r28
     3da:	07 96       	adiw	r24, 0x07	; 7
     3dc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     3e0:	62 e7       	ldi	r22, 0x72	; 114
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     3ec:	be 01       	movw	r22, r28
     3ee:	69 5f       	subi	r22, 0xF9	; 249
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	ce 01       	movw	r24, r28
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZplRK15StringSumHelperRK6String>
     3fa:	bc 01       	movw	r22, r24
     3fc:	ce 01       	movw	r24, r28
     3fe:	0d 96       	adiw	r24, 0x0d	; 13
     400:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     404:	ce 01       	movw	r24, r28
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     40c:	ce 01       	movw	r24, r28
     40e:	07 96       	adiw	r24, 0x07	; 7
     410:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

   
  lcd.clear();
     414:	8b ef       	ldi	r24, 0xFB	; 251
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN17LiquidCrystal_I2C5clearEv>


  //Print out the temperature and the conductivity 
  lcd.setCursor(0,0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	8b ef       	ldi	r24, 0xFB	; 251
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(sTemp);
     428:	be 01       	movw	r22, r28
     42a:	67 5e       	subi	r22, 0xE7	; 231
     42c:	7f 4f       	sbci	r23, 0xFF	; 255
     42e:	8b ef       	ldi	r24, 0xFB	; 251
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printERK6String>

  lcd.setCursor(0,1);
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	8b ef       	ldi	r24, 0xFB	; 251
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(sConductivity);
     442:	be 01       	movw	r22, r28
     444:	63 5f       	subi	r22, 0xF3	; 243
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	8b ef       	ldi	r24, 0xFB	; 251
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printERK6String>
  lcd.setCursor(12,1);
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	6c e0       	ldi	r22, 0x0C	; 12
     454:	8b ef       	ldi	r24, 0xFB	; 251
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(cond_state_string);
     45c:	69 ed       	ldi	r22, 0xD9	; 217
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	8b ef       	ldi	r24, 0xFB	; 251
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printERK6String>
void printToDisplay()
{
  //Convert all of readings into a printable string
  String sTemp = "TEMP: " + String(temp) + " " + temp_state_string;
  String sPh = "PH: " + String(ph) +  " " + ph_state_string;
  String sConductivity = "COND: " + String((int)(conductivity + 0.5));
     468:	ce 01       	movw	r24, r28
     46a:	0d 96       	adiw	r24, 0x0d	; 13
     46c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

void printToDisplay()
{
  //Convert all of readings into a printable string
  String sTemp = "TEMP: " + String(temp) + " " + temp_state_string;
  String sPh = "PH: " + String(ph) +  " " + ph_state_string;
     470:	ce 01       	movw	r24, r28
     472:	43 96       	adiw	r24, 0x13	; 19
     474:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
}

void printToDisplay()
{
  //Convert all of readings into a printable string
  String sTemp = "TEMP: " + String(temp) + " " + temp_state_string;
     478:	ce 01       	movw	r24, r28
     47a:	49 96       	adiw	r24, 0x19	; 25
     47c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
  lcd.setCursor(0,1);
  lcd.print(sConductivity);
  lcd.setCursor(12,1);
  lcd.print(cond_state_string);

}
     480:	6e 96       	adiw	r28, 0x1e	; 30
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <_Z9parseData6String>:

//Get the data contained in the Serial String
void parseData(String data)
{
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	00 d0       	rcall	.+0      	; 0x49e <_Z9parseData6String+0xc>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <_Z9parseData6String+0xe>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <_Z9parseData6String+0x10>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	8c 01       	movw	r16, r24
  if(data.startsWith("$0:"))
     4a8:	69 e7       	ldi	r22, 0x79	; 121
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     4b4:	be 01       	movw	r22, r28
     4b6:	6f 5f       	subi	r22, 0xFF	; 255
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	c8 01       	movw	r24, r16
     4bc:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZNK6String10startsWithERKS_>
     4c0:	f8 2e       	mov	r15, r24
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     4ca:	ff 20       	and	r15, r15
     4cc:	b9 f0       	breq	.+46     	; 0x4fc <_Z9parseData6String+0x6a>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     4ce:	f8 01       	movw	r30, r16
     4d0:	24 81       	ldd	r18, Z+4	; 0x04
     4d2:	35 81       	ldd	r19, Z+5	; 0x05
     4d4:	43 e0       	ldi	r20, 0x03	; 3
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	b8 01       	movw	r22, r16
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZNK6String9substringEjj>
  {
    temp = data.substring(3).toFloat();
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZNK6String7toFloatEv>
     4ea:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <temp>
     4ee:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <temp+0x1>
     4f2:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <temp+0x2>
     4f6:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <temp+0x3>
     4fa:	53 c0       	rjmp	.+166    	; 0x5a2 <_Z9parseData6String+0x110>
  }else if(data.startsWith("$2:"))
     4fc:	6d e7       	ldi	r22, 0x7D	; 125
     4fe:	71 e0       	ldi	r23, 0x01	; 1
     500:	ce 01       	movw	r24, r28
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     508:	be 01       	movw	r22, r28
     50a:	6f 5f       	subi	r22, 0xFF	; 255
     50c:	7f 4f       	sbci	r23, 0xFF	; 255
     50e:	c8 01       	movw	r24, r16
     510:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZNK6String10startsWithERKS_>
     514:	f8 2e       	mov	r15, r24
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     51e:	ff 20       	and	r15, r15
     520:	b9 f0       	breq	.+46     	; 0x550 <_Z9parseData6String+0xbe>
     522:	f8 01       	movw	r30, r16
     524:	24 81       	ldd	r18, Z+4	; 0x04
     526:	35 81       	ldd	r19, Z+5	; 0x05
     528:	43 e0       	ldi	r20, 0x03	; 3
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	b8 01       	movw	r22, r16
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZNK6String9substringEjj>
  {
    ph = data.substring(3).toFloat();
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZNK6String7toFloatEv>
     53e:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <ph>
     542:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <ph+0x1>
     546:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <ph+0x2>
     54a:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <ph+0x3>
     54e:	29 c0       	rjmp	.+82     	; 0x5a2 <_Z9parseData6String+0x110>
  }else if(data.startsWith("$1:"))
     550:	61 e8       	ldi	r22, 0x81	; 129
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	c8 01       	movw	r24, r16
     564:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZNK6String10startsWithERKS_>
     568:	f8 2e       	mov	r15, r24
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     572:	ff 20       	and	r15, r15
     574:	d1 f0       	breq	.+52     	; 0x5aa <_Z9parseData6String+0x118>
     576:	f8 01       	movw	r30, r16
     578:	24 81       	ldd	r18, Z+4	; 0x04
     57a:	35 81       	ldd	r19, Z+5	; 0x05
     57c:	43 e0       	ldi	r20, 0x03	; 3
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	b8 01       	movw	r22, r16
     582:	ce 01       	movw	r24, r28
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZNK6String9substringEjj>
  {
    conductivity = data.substring(3).toFloat();
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZNK6String7toFloatEv>
     592:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <conductivity>
     596:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <conductivity+0x1>
     59a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <conductivity+0x2>
     59e:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <conductivity+0x3>
     5a2:	ce 01       	movw	r24, r28
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
  }

  //Used to check if their was a reading error sent from the slave arduino. 
  if(data.startsWith("$E:"))
     5aa:	65 e8       	ldi	r22, 0x85	; 133
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	c8 01       	movw	r24, r16
     5be:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZNK6String10startsWithERKS_>
     5c2:	f8 2e       	mov	r15, r24
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     5cc:	ff 20       	and	r15, r15
     5ce:	a9 f0       	breq	.+42     	; 0x5fa <_Z9parseData6String+0x168>
     5d0:	f8 01       	movw	r30, r16
     5d2:	24 81       	ldd	r18, Z+4	; 0x04
     5d4:	35 81       	ldd	r19, Z+5	; 0x05
     5d6:	43 e0       	ldi	r20, 0x03	; 3
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	b8 01       	movw	r22, r16
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZNK6String9substringEjj>
  {
    currentError = data.substring(3);
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	82 ed       	ldi	r24, 0xD2	; 210
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN6StringaSEOS_>
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
  }

  
}
     5fa:	26 96       	adiw	r28, 0x06	; 6
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	08 95       	ret

00000612 <_Z13checkReadingsv>:

//Check the sensor readings to make sure they are in the optimal place
void checkReadings()
{
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
  //Tempeture Readings
  if(temp <= (TEMP_OPTIMAL + TEMP_THREASHOLD) && temp >= (TEMP_OPTIMAL - TEMP_THREASHOLD)) // Check for normal temp
     61a:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <temp>
     61e:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <temp+0x1>
     622:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <temp+0x2>
     626:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <temp+0x3>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	4c ea       	ldi	r20, 0xAC	; 172
     630:	51 e4       	ldi	r21, 0x41	; 65
     632:	c7 01       	movw	r24, r14
     634:	b6 01       	movw	r22, r12
     636:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__cmpsf2>
     63a:	18 16       	cp	r1, r24
     63c:	9c f0       	brlt	.+38     	; 0x664 <_Z13checkReadingsv+0x52>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	44 e9       	ldi	r20, 0x94	; 148
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	c7 01       	movw	r24, r14
     648:	b6 01       	movw	r22, r12
     64a:	0e 94 a3 05 	call	0xb46	; 0xb46 <__gesf2>
     64e:	87 fd       	sbrc	r24, 7
     650:	09 c0       	rjmp	.+18     	; 0x664 <_Z13checkReadingsv+0x52>
  {
    temp_state = 1;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <temp_state+0x1>
     65a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <temp_state>
    temp_state_string = "NORM";
     65e:	69 e8       	ldi	r22, 0x89	; 137
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	23 c0       	rjmp	.+70     	; 0x6aa <_Z13checkReadingsv+0x98>
  }else if(temp < TEMP_OPTIMAL - TEMP_THREASHOLD) // Check for low temp
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	44 e9       	ldi	r20, 0x94	; 148
     66a:	51 e4       	ldi	r21, 0x41	; 65
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__cmpsf2>
     674:	87 ff       	sbrs	r24, 7
     676:	09 c0       	rjmp	.+18     	; 0x68a <_Z13checkReadingsv+0x78>
  {
    temp_state = 2;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <temp_state+0x1>
     680:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <temp_state>
    temp_state_string = "LOW";
     684:	6e e8       	ldi	r22, 0x8E	; 142
     686:	71 e0       	ldi	r23, 0x01	; 1
     688:	10 c0       	rjmp	.+32     	; 0x6aa <_Z13checkReadingsv+0x98>
  }else if(temp > TEMP_OPTIMAL + TEMP_THREASHOLD) // Check for high temp
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	4c ea       	ldi	r20, 0xAC	; 172
     690:	51 e4       	ldi	r21, 0x41	; 65
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	0e 94 a3 05 	call	0xb46	; 0xb46 <__gesf2>
     69a:	18 16       	cp	r1, r24
     69c:	54 f4       	brge	.+20     	; 0x6b2 <_Z13checkReadingsv+0xa0>
  {
    temp_state = 0;
     69e:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <temp_state+0x1>
     6a2:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <temp_state>
    temp_state_string = "HIGH";
     6a6:	62 e9       	ldi	r22, 0x92	; 146
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	87 ee       	ldi	r24, 0xE7	; 231
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN6StringaSEPKc>
 

  ///////////////// 
  //Conductivity Readings

  if(conductivity <= (CONDUCT_OPTIMAL + CONDUCT_THREASHOLD) && conductivity >= (CONDUCT_OPTIMAL - CONDUCT_THREASHOLD)) // Check for normal temp
     6b2:	c0 90 ef 01 	lds	r12, 0x01EF	; 0x8001ef <conductivity>
     6b6:	d0 90 f0 01 	lds	r13, 0x01F0	; 0x8001f0 <conductivity+0x1>
     6ba:	e0 90 f1 01 	lds	r14, 0x01F1	; 0x8001f1 <conductivity+0x2>
     6be:	f0 90 f2 01 	lds	r15, 0x01F2	; 0x8001f2 <conductivity+0x3>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 ec       	ldi	r19, 0xC0	; 192
     6c6:	48 ea       	ldi	r20, 0xA8	; 168
     6c8:	54 e4       	ldi	r21, 0x44	; 68
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__cmpsf2>
     6d2:	18 16       	cp	r1, r24
     6d4:	9c f0       	brlt	.+38     	; 0x6fc <_Z13checkReadingsv+0xea>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e4       	ldi	r19, 0x40	; 64
     6da:	43 e8       	ldi	r20, 0x83	; 131
     6dc:	54 e4       	ldi	r21, 0x44	; 68
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <__gesf2>
     6e6:	87 fd       	sbrc	r24, 7
     6e8:	09 c0       	rjmp	.+18     	; 0x6fc <_Z13checkReadingsv+0xea>
  {
    cond_state = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <cond_state+0x1>
     6f2:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <cond_state>
    cond_state_string = "NORM";
     6f6:	69 e8       	ldi	r22, 0x89	; 137
     6f8:	71 e0       	ldi	r23, 0x01	; 1
     6fa:	23 c0       	rjmp	.+70     	; 0x742 <_Z13checkReadingsv+0x130>
  }else if(conductivity < CONDUCT_OPTIMAL - CONDUCT_THREASHOLD) // Check for low temp
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e4       	ldi	r19, 0x40	; 64
     700:	43 e8       	ldi	r20, 0x83	; 131
     702:	54 e4       	ldi	r21, 0x44	; 68
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__cmpsf2>
     70c:	87 ff       	sbrs	r24, 7
     70e:	09 c0       	rjmp	.+18     	; 0x722 <_Z13checkReadingsv+0x110>
  {
    cond_state = 2;
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <cond_state+0x1>
     718:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <cond_state>
    cond_state_string = "LOW";
     71c:	6e e8       	ldi	r22, 0x8E	; 142
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	10 c0       	rjmp	.+32     	; 0x742 <_Z13checkReadingsv+0x130>
  }else if(conductivity > CONDUCT_OPTIMAL + CONDUCT_THREASHOLD) // Check for high temp
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 ec       	ldi	r19, 0xC0	; 192
     726:	48 ea       	ldi	r20, 0xA8	; 168
     728:	54 e4       	ldi	r21, 0x44	; 68
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__gesf2>
     732:	18 16       	cp	r1, r24
     734:	74 f4       	brge	.+28     	; 0x752 <_Z13checkReadingsv+0x140>
  {
    cond_state = 0;
     736:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <cond_state+0x1>
     73a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <cond_state>
    cond_state_string = "HIGH";
     73e:	62 e9       	ldi	r22, 0x92	; 146
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	89 ed       	ldi	r24, 0xD9	; 217
     744:	91 e0       	ldi	r25, 0x01	; 1
  }
}
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
    cond_state = 2;
    cond_state_string = "LOW";
  }else if(conductivity > CONDUCT_OPTIMAL + CONDUCT_THREASHOLD) // Check for high temp
  {
    cond_state = 0;
    cond_state_string = "HIGH";
     74e:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <_ZN6StringaSEPKc>
  }
}
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	08 95       	ret

0000075c <_GLOBAL__sub_I_lcd>:
     75c:	0f 93       	push	r16
void printToDisplay();
void parseData(String data);
void checkReadings();
void initDisplay();

LiquidCrystal_I2C lcd(0x27, 16, 2);
     75e:	00 e0       	ldi	r16, 0x00	; 0
     760:	22 e0       	ldi	r18, 0x02	; 2
     762:	40 e1       	ldi	r20, 0x10	; 16
     764:	67 e2       	ldi	r22, 0x27	; 39
     766:	8b ef       	ldi	r24, 0xFB	; 251
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN17LiquidCrystal_I2CC1Ehhhh>

//boolean for each sensor
bool ph_high, ph_normal, ph_low; //May be removed in the final program

int temp_state = 0; //0 - high 1 - normal 2 - low
String temp_state_string = "BOOT";
     76e:	67 e9       	ldi	r22, 0x97	; 151
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	87 ee       	ldi	r24, 0xE7	; 231
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>

int ph_state = 0; //0 - high 1 - normal 2 - low
String ph_state_string = "BOOT";
     77a:	67 e9       	ldi	r22, 0x97	; 151
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	81 ee       	ldi	r24, 0xE1	; 225
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>

int cond_state = 0; //0 - high 1 - normal 2 - low
String cond_state_string = "BOOT";
     786:	67 e9       	ldi	r22, 0x97	; 151
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	89 ed       	ldi	r24, 0xD9	; 217
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>

bool readingData = true;
bool synchError = false;

String currentError;
     792:	68 e7       	ldi	r22, 0x78	; 120
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	82 ed       	ldi	r24, 0xD2	; 210
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
String data;
     79e:	68 e7       	ldi	r22, 0x78	; 120
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	8c ec       	ldi	r24, 0xCC	; 204
     7a4:	91 e0       	ldi	r25, 0x01	; 1
  }else if(conductivity > CONDUCT_OPTIMAL + CONDUCT_THREASHOLD) // Check for high temp
  {
    cond_state = 0;
    cond_state_string = "HIGH";
  }
}
     7a6:	0f 91       	pop	r16

bool readingData = true;
bool synchError = false;

String currentError;
String data;
     7a8:	0c 94 cf 09 	jmp	0x139e	; 0x139e <_ZN6StringC1EPKc>

000007ac <_GLOBAL__sub_D_lcd>:
     7ac:	8c ec       	ldi	r24, 0xCC	; 204
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
String cond_state_string = "BOOT";

bool readingData = true;
bool synchError = false;

String currentError;
     7b4:	82 ed       	ldi	r24, 0xD2	; 210
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

int ph_state = 0; //0 - high 1 - normal 2 - low
String ph_state_string = "BOOT";

int cond_state = 0; //0 - high 1 - normal 2 - low
String cond_state_string = "BOOT";
     7bc:	89 ed       	ldi	r24, 0xD9	; 217
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

int temp_state = 0; //0 - high 1 - normal 2 - low
String temp_state_string = "BOOT";

int ph_state = 0; //0 - high 1 - normal 2 - low
String ph_state_string = "BOOT";
     7c4:	81 ee       	ldi	r24, 0xE1	; 225
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

//boolean for each sensor
bool ph_high, ph_normal, ph_low; //May be removed in the final program

int temp_state = 0; //0 - high 1 - normal 2 - low
String temp_state_string = "BOOT";
     7cc:	87 ee       	ldi	r24, 0xE7	; 231
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_ZN6StringD1Ev>

000007d4 <_Z13readDataBytesv>:
	
}

//Read in the incoming data as charecters and convert them into a string
String readDataBytes()
{
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <_Z13readDataBytesv+0xc>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <_Z13readDataBytesv+0xe>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <_Z13readDataBytesv+0x10>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	8c 01       	movw	r16, r24
    String readData = "";
     7ea:	68 e7       	ldi	r22, 0x78	; 120
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>

	while(readingData){
     7f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readingData>
     7fa:	88 23       	and	r24, r24
     7fc:	b1 f0       	breq	.+44     	; 0x82a <_Z13readDataBytesv+0x56>
      char charecter =  Serial.read();
     7fe:	87 e0       	ldi	r24, 0x07	; 7
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN14HardwareSerial4readEv>
     806:	f8 2e       	mov	r15, r24

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     808:	68 2f       	mov	r22, r24
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN6String6concatEc>
      readData += charecter;
	  
      if(charecter == '#') //The # is used to tell that it is the end of the 'packet' of data
     812:	83 e2       	ldi	r24, 0x23	; 35
     814:	f8 12       	cpse	r15, r24
     816:	04 c0       	rjmp	.+8      	; 0x820 <_Z13readDataBytesv+0x4c>
	  {
		readingData = false;
     818:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readingData>
        synchError = false;
     81c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <synchError>
          
      }
  	
	  digitalWrite(SYNCH_PIN,HIGH);
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
//Read in the incoming data as charecters and convert them into a string
String readDataBytes()
{
    String readData = "";

	while(readingData){
     828:	e6 cf       	rjmp	.-52     	; 0x7f6 <_Z13readDataBytesv+0x22>
  	
	  digitalWrite(SYNCH_PIN,HIGH);
		
	} 
	   
    digitalWrite(SYNCH_PIN,LOW);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	88 e0       	ldi	r24, 0x08	; 8
     82e:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
	
    Serial.flush();
     832:	87 e0       	ldi	r24, 0x07	; 7
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN14HardwareSerial5flushEv>
    return readData.substring(0,readData.length()-1);
     83a:	2d 81       	ldd	r18, Y+5	; 0x05
     83c:	3e 81       	ldd	r19, Y+6	; 0x06
     83e:	21 50       	subi	r18, 0x01	; 1
     840:	31 09       	sbc	r19, r1
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZNK6String9substringEjj>
}

//Read in the incoming data as charecters and convert them into a string
String readDataBytes()
{
    String readData = "";
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
	
    Serial.flush();
    return readData.substring(0,readData.length()-1);
    
    
}
     85a:	c8 01       	movw	r24, r16
     85c:	26 96       	adiw	r28, 0x06	; 6
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	08 95       	ret

00000874 <loop>:
  Serial.begin(9600);
}


//Loop function
void loop() {
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	00 d0       	rcall	.+0      	; 0x87a <loop+0x6>
     87a:	00 d0       	rcall	.+0      	; 0x87c <loop+0x8>
     87c:	00 d0       	rcall	.+0      	; 0x87e <loop+0xa>
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
  

   
    
   if(Serial.available() > 0){ //Make sure we dont have a synch error before we output to the display
     882:	87 e0       	ldi	r24, 0x07	; 7
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN14HardwareSerial9availableEv>
     88a:	18 16       	cp	r1, r24
     88c:	19 06       	cpc	r1, r25
     88e:	2c f5       	brge	.+74     	; 0x8da <loop+0x66>
     readingData = true; 
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <readingData>
     data = readDataBytes();
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_Z13readDataBytesv>
     89e:	be 01       	movw	r22, r28
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	8c ec       	ldi	r24, 0xCC	; 204
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN6StringaSEOS_>
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     parseData(data);
     8b4:	6c ec       	ldi	r22, 0xCC	; 204
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN6StringC1ERKS_>
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	0e 94 49 02 	call	0x492	; 0x492 <_Z9parseData6String>
     8c8:	ce 01       	movw	r24, r28
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6StringD1Ev>
     checkReadings();
     8d0:	0e 94 09 03 	call	0x612	; 0x612 <_Z13checkReadingsv>
     printToDisplay();
     8d4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_Z14printToDisplayv>
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <loop+0x72>
     
     
   }else {
    readingData = false;
     8da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readingData>
    printError(DATA_ERROR);
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 48 01 	call	0x290	; 0x290 <_Z10printErrori>
   }
   delay(800);
     8e6:	60 e2       	ldi	r22, 0x20	; 32
     8e8:	73 e0       	ldi	r23, 0x03	; 3
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 4a 08 	call	0x1094	; 0x1094 <delay>
   digitalWrite(SYNCH_PIN,LOW);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	88 e0       	ldi	r24, 0x08	; 8
     8f6:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
}
     8fa:	26 96       	adiw	r28, 0x06	; 6
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <__subsf3>:
     90c:	50 58       	subi	r21, 0x80	; 128

0000090e <__addsf3>:
     90e:	bb 27       	eor	r27, r27
     910:	aa 27       	eor	r26, r26
     912:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3x>
     916:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_round>
     91a:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_pscA>
     91e:	38 f0       	brcs	.+14     	; 0x92e <__addsf3+0x20>
     920:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscB>
     924:	20 f0       	brcs	.+8      	; 0x92e <__addsf3+0x20>
     926:	39 f4       	brne	.+14     	; 0x936 <__addsf3+0x28>
     928:	9f 3f       	cpi	r25, 0xFF	; 255
     92a:	19 f4       	brne	.+6      	; 0x932 <__addsf3+0x24>
     92c:	26 f4       	brtc	.+8      	; 0x936 <__addsf3+0x28>
     92e:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_nan>
     932:	0e f4       	brtc	.+2      	; 0x936 <__addsf3+0x28>
     934:	e0 95       	com	r30
     936:	e7 fb       	bst	r30, 7
     938:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_inf>

0000093c <__addsf3x>:
     93c:	e9 2f       	mov	r30, r25
     93e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_split3>
     942:	58 f3       	brcs	.-42     	; 0x91a <__addsf3+0xc>
     944:	ba 17       	cp	r27, r26
     946:	62 07       	cpc	r22, r18
     948:	73 07       	cpc	r23, r19
     94a:	84 07       	cpc	r24, r20
     94c:	95 07       	cpc	r25, r21
     94e:	20 f0       	brcs	.+8      	; 0x958 <__addsf3x+0x1c>
     950:	79 f4       	brne	.+30     	; 0x970 <__addsf3x+0x34>
     952:	a6 f5       	brtc	.+104    	; 0x9bc <__addsf3x+0x80>
     954:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_zero>
     958:	0e f4       	brtc	.+2      	; 0x95c <__addsf3x+0x20>
     95a:	e0 95       	com	r30
     95c:	0b 2e       	mov	r0, r27
     95e:	ba 2f       	mov	r27, r26
     960:	a0 2d       	mov	r26, r0
     962:	0b 01       	movw	r0, r22
     964:	b9 01       	movw	r22, r18
     966:	90 01       	movw	r18, r0
     968:	0c 01       	movw	r0, r24
     96a:	ca 01       	movw	r24, r20
     96c:	a0 01       	movw	r20, r0
     96e:	11 24       	eor	r1, r1
     970:	ff 27       	eor	r31, r31
     972:	59 1b       	sub	r21, r25
     974:	99 f0       	breq	.+38     	; 0x99c <__addsf3x+0x60>
     976:	59 3f       	cpi	r21, 0xF9	; 249
     978:	50 f4       	brcc	.+20     	; 0x98e <__addsf3x+0x52>
     97a:	50 3e       	cpi	r21, 0xE0	; 224
     97c:	68 f1       	brcs	.+90     	; 0x9d8 <__addsf3x+0x9c>
     97e:	1a 16       	cp	r1, r26
     980:	f0 40       	sbci	r31, 0x00	; 0
     982:	a2 2f       	mov	r26, r18
     984:	23 2f       	mov	r18, r19
     986:	34 2f       	mov	r19, r20
     988:	44 27       	eor	r20, r20
     98a:	58 5f       	subi	r21, 0xF8	; 248
     98c:	f3 cf       	rjmp	.-26     	; 0x974 <__addsf3x+0x38>
     98e:	46 95       	lsr	r20
     990:	37 95       	ror	r19
     992:	27 95       	ror	r18
     994:	a7 95       	ror	r26
     996:	f0 40       	sbci	r31, 0x00	; 0
     998:	53 95       	inc	r21
     99a:	c9 f7       	brne	.-14     	; 0x98e <__addsf3x+0x52>
     99c:	7e f4       	brtc	.+30     	; 0x9bc <__addsf3x+0x80>
     99e:	1f 16       	cp	r1, r31
     9a0:	ba 0b       	sbc	r27, r26
     9a2:	62 0b       	sbc	r22, r18
     9a4:	73 0b       	sbc	r23, r19
     9a6:	84 0b       	sbc	r24, r20
     9a8:	ba f0       	brmi	.+46     	; 0x9d8 <__addsf3x+0x9c>
     9aa:	91 50       	subi	r25, 0x01	; 1
     9ac:	a1 f0       	breq	.+40     	; 0x9d6 <__addsf3x+0x9a>
     9ae:	ff 0f       	add	r31, r31
     9b0:	bb 1f       	adc	r27, r27
     9b2:	66 1f       	adc	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	88 1f       	adc	r24, r24
     9b8:	c2 f7       	brpl	.-16     	; 0x9aa <__addsf3x+0x6e>
     9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <__addsf3x+0x9c>
     9bc:	ba 0f       	add	r27, r26
     9be:	62 1f       	adc	r22, r18
     9c0:	73 1f       	adc	r23, r19
     9c2:	84 1f       	adc	r24, r20
     9c4:	48 f4       	brcc	.+18     	; 0x9d8 <__addsf3x+0x9c>
     9c6:	87 95       	ror	r24
     9c8:	77 95       	ror	r23
     9ca:	67 95       	ror	r22
     9cc:	b7 95       	ror	r27
     9ce:	f7 95       	ror	r31
     9d0:	9e 3f       	cpi	r25, 0xFE	; 254
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <__addsf3x+0x9a>
     9d4:	b0 cf       	rjmp	.-160    	; 0x936 <__addsf3+0x28>
     9d6:	93 95       	inc	r25
     9d8:	88 0f       	add	r24, r24
     9da:	08 f0       	brcs	.+2      	; 0x9de <__addsf3x+0xa2>
     9dc:	99 27       	eor	r25, r25
     9de:	ee 0f       	add	r30, r30
     9e0:	97 95       	ror	r25
     9e2:	87 95       	ror	r24
     9e4:	08 95       	ret

000009e6 <__cmpsf2>:
     9e6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_cmp>
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <__cmpsf2+0x8>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	08 95       	ret

000009f0 <__fixsfsi>:
     9f0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fixunssfsi>
     9f4:	68 94       	set
     9f6:	b1 11       	cpse	r27, r1
     9f8:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_szero>
     9fc:	08 95       	ret

000009fe <__fixunssfsi>:
     9fe:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_splitA>
     a02:	88 f0       	brcs	.+34     	; 0xa26 <__fixunssfsi+0x28>
     a04:	9f 57       	subi	r25, 0x7F	; 127
     a06:	98 f0       	brcs	.+38     	; 0xa2e <__fixunssfsi+0x30>
     a08:	b9 2f       	mov	r27, r25
     a0a:	99 27       	eor	r25, r25
     a0c:	b7 51       	subi	r27, 0x17	; 23
     a0e:	b0 f0       	brcs	.+44     	; 0xa3c <__fixunssfsi+0x3e>
     a10:	e1 f0       	breq	.+56     	; 0xa4a <__fixunssfsi+0x4c>
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	1a f0       	brmi	.+6      	; 0xa22 <__fixunssfsi+0x24>
     a1c:	ba 95       	dec	r27
     a1e:	c9 f7       	brne	.-14     	; 0xa12 <__fixunssfsi+0x14>
     a20:	14 c0       	rjmp	.+40     	; 0xa4a <__fixunssfsi+0x4c>
     a22:	b1 30       	cpi	r27, 0x01	; 1
     a24:	91 f0       	breq	.+36     	; 0xa4a <__fixunssfsi+0x4c>
     a26:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fp_zero>
     a2a:	b1 e0       	ldi	r27, 0x01	; 1
     a2c:	08 95       	ret
     a2e:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_zero>
     a32:	67 2f       	mov	r22, r23
     a34:	78 2f       	mov	r23, r24
     a36:	88 27       	eor	r24, r24
     a38:	b8 5f       	subi	r27, 0xF8	; 248
     a3a:	39 f0       	breq	.+14     	; 0xa4a <__fixunssfsi+0x4c>
     a3c:	b9 3f       	cpi	r27, 0xF9	; 249
     a3e:	cc f3       	brlt	.-14     	; 0xa32 <__fixunssfsi+0x34>
     a40:	86 95       	lsr	r24
     a42:	77 95       	ror	r23
     a44:	67 95       	ror	r22
     a46:	b3 95       	inc	r27
     a48:	d9 f7       	brne	.-10     	; 0xa40 <__fixunssfsi+0x42>
     a4a:	3e f4       	brtc	.+14     	; 0xa5a <__fixunssfsi+0x5c>
     a4c:	90 95       	com	r25
     a4e:	80 95       	com	r24
     a50:	70 95       	com	r23
     a52:	61 95       	neg	r22
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	8f 4f       	sbci	r24, 0xFF	; 255
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	08 95       	ret

00000a5c <__fp_cmp>:
     a5c:	99 0f       	add	r25, r25
     a5e:	00 08       	sbc	r0, r0
     a60:	55 0f       	add	r21, r21
     a62:	aa 0b       	sbc	r26, r26
     a64:	e0 e8       	ldi	r30, 0x80	; 128
     a66:	fe ef       	ldi	r31, 0xFE	; 254
     a68:	16 16       	cp	r1, r22
     a6a:	17 06       	cpc	r1, r23
     a6c:	e8 07       	cpc	r30, r24
     a6e:	f9 07       	cpc	r31, r25
     a70:	c0 f0       	brcs	.+48     	; 0xaa2 <__fp_cmp+0x46>
     a72:	12 16       	cp	r1, r18
     a74:	13 06       	cpc	r1, r19
     a76:	e4 07       	cpc	r30, r20
     a78:	f5 07       	cpc	r31, r21
     a7a:	98 f0       	brcs	.+38     	; 0xaa2 <__fp_cmp+0x46>
     a7c:	62 1b       	sub	r22, r18
     a7e:	73 0b       	sbc	r23, r19
     a80:	84 0b       	sbc	r24, r20
     a82:	95 0b       	sbc	r25, r21
     a84:	39 f4       	brne	.+14     	; 0xa94 <__fp_cmp+0x38>
     a86:	0a 26       	eor	r0, r26
     a88:	61 f0       	breq	.+24     	; 0xaa2 <__fp_cmp+0x46>
     a8a:	23 2b       	or	r18, r19
     a8c:	24 2b       	or	r18, r20
     a8e:	25 2b       	or	r18, r21
     a90:	21 f4       	brne	.+8      	; 0xa9a <__fp_cmp+0x3e>
     a92:	08 95       	ret
     a94:	0a 26       	eor	r0, r26
     a96:	09 f4       	brne	.+2      	; 0xa9a <__fp_cmp+0x3e>
     a98:	a1 40       	sbci	r26, 0x01	; 1
     a9a:	a6 95       	lsr	r26
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	81 1d       	adc	r24, r1
     aa0:	81 1d       	adc	r24, r1
     aa2:	08 95       	ret

00000aa4 <__fp_inf>:
     aa4:	97 f9       	bld	r25, 7
     aa6:	9f 67       	ori	r25, 0x7F	; 127
     aa8:	80 e8       	ldi	r24, 0x80	; 128
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	08 95       	ret

00000ab0 <__fp_nan>:
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	80 ec       	ldi	r24, 0xC0	; 192
     ab4:	08 95       	ret

00000ab6 <__fp_pscA>:
     ab6:	00 24       	eor	r0, r0
     ab8:	0a 94       	dec	r0
     aba:	16 16       	cp	r1, r22
     abc:	17 06       	cpc	r1, r23
     abe:	18 06       	cpc	r1, r24
     ac0:	09 06       	cpc	r0, r25
     ac2:	08 95       	ret

00000ac4 <__fp_pscB>:
     ac4:	00 24       	eor	r0, r0
     ac6:	0a 94       	dec	r0
     ac8:	12 16       	cp	r1, r18
     aca:	13 06       	cpc	r1, r19
     acc:	14 06       	cpc	r1, r20
     ace:	05 06       	cpc	r0, r21
     ad0:	08 95       	ret

00000ad2 <__fp_round>:
     ad2:	09 2e       	mov	r0, r25
     ad4:	03 94       	inc	r0
     ad6:	00 0c       	add	r0, r0
     ad8:	11 f4       	brne	.+4      	; 0xade <__fp_round+0xc>
     ada:	88 23       	and	r24, r24
     adc:	52 f0       	brmi	.+20     	; 0xaf2 <__fp_round+0x20>
     ade:	bb 0f       	add	r27, r27
     ae0:	40 f4       	brcc	.+16     	; 0xaf2 <__fp_round+0x20>
     ae2:	bf 2b       	or	r27, r31
     ae4:	11 f4       	brne	.+4      	; 0xaea <__fp_round+0x18>
     ae6:	60 ff       	sbrs	r22, 0
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <__fp_round+0x20>
     aea:	6f 5f       	subi	r22, 0xFF	; 255
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	8f 4f       	sbci	r24, 0xFF	; 255
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	08 95       	ret

00000af4 <__fp_split3>:
     af4:	57 fd       	sbrc	r21, 7
     af6:	90 58       	subi	r25, 0x80	; 128
     af8:	44 0f       	add	r20, r20
     afa:	55 1f       	adc	r21, r21
     afc:	59 f0       	breq	.+22     	; 0xb14 <__fp_splitA+0x10>
     afe:	5f 3f       	cpi	r21, 0xFF	; 255
     b00:	71 f0       	breq	.+28     	; 0xb1e <__fp_splitA+0x1a>
     b02:	47 95       	ror	r20

00000b04 <__fp_splitA>:
     b04:	88 0f       	add	r24, r24
     b06:	97 fb       	bst	r25, 7
     b08:	99 1f       	adc	r25, r25
     b0a:	61 f0       	breq	.+24     	; 0xb24 <__fp_splitA+0x20>
     b0c:	9f 3f       	cpi	r25, 0xFF	; 255
     b0e:	79 f0       	breq	.+30     	; 0xb2e <__fp_splitA+0x2a>
     b10:	87 95       	ror	r24
     b12:	08 95       	ret
     b14:	12 16       	cp	r1, r18
     b16:	13 06       	cpc	r1, r19
     b18:	14 06       	cpc	r1, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	f2 cf       	rjmp	.-28     	; 0xb02 <__fp_split3+0xe>
     b1e:	46 95       	lsr	r20
     b20:	f1 df       	rcall	.-30     	; 0xb04 <__fp_splitA>
     b22:	08 c0       	rjmp	.+16     	; 0xb34 <__fp_splitA+0x30>
     b24:	16 16       	cp	r1, r22
     b26:	17 06       	cpc	r1, r23
     b28:	18 06       	cpc	r1, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	f1 cf       	rjmp	.-30     	; 0xb10 <__fp_splitA+0xc>
     b2e:	86 95       	lsr	r24
     b30:	71 05       	cpc	r23, r1
     b32:	61 05       	cpc	r22, r1
     b34:	08 94       	sec
     b36:	08 95       	ret

00000b38 <__fp_zero>:
     b38:	e8 94       	clt

00000b3a <__fp_szero>:
     b3a:	bb 27       	eor	r27, r27
     b3c:	66 27       	eor	r22, r22
     b3e:	77 27       	eor	r23, r23
     b40:	cb 01       	movw	r24, r22
     b42:	97 f9       	bld	r25, 7
     b44:	08 95       	ret

00000b46 <__gesf2>:
     b46:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_cmp>
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <__gesf2+0x8>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	08 95       	ret

00000b50 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b50:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b52:	91 8d       	ldd	r25, Z+25	; 0x19
     b54:	22 8d       	ldd	r18, Z+26	; 0x1a
     b56:	89 2f       	mov	r24, r25
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	80 5c       	subi	r24, 0xC0	; 192
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	82 1b       	sub	r24, r18
     b60:	91 09       	sbc	r25, r1
}
     b62:	8f 73       	andi	r24, 0x3F	; 63
     b64:	99 27       	eor	r25, r25
     b66:	08 95       	ret

00000b68 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     b68:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     b6a:	91 8d       	ldd	r25, Z+25	; 0x19
     b6c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b6e:	98 17       	cp	r25, r24
     b70:	31 f0       	breq	.+12     	; 0xb7e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b72:	82 8d       	ldd	r24, Z+26	; 0x1a
     b74:	e8 0f       	add	r30, r24
     b76:	f1 1d       	adc	r31, r1
     b78:	85 8d       	ldd	r24, Z+29	; 0x1d
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b82:	08 95       	ret

00000b84 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     b84:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b86:	91 8d       	ldd	r25, Z+25	; 0x19
     b88:	82 8d       	ldd	r24, Z+26	; 0x1a
     b8a:	98 17       	cp	r25, r24
     b8c:	61 f0       	breq	.+24     	; 0xba6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     b8e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b90:	df 01       	movw	r26, r30
     b92:	a8 0f       	add	r26, r24
     b94:	b1 1d       	adc	r27, r1
     b96:	5d 96       	adiw	r26, 0x1d	; 29
     b98:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b9a:	92 8d       	ldd	r25, Z+26	; 0x1a
     b9c:	9f 5f       	subi	r25, 0xFF	; 255
     b9e:	9f 73       	andi	r25, 0x3F	; 63
     ba0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     baa:	08 95       	ret

00000bac <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     bac:	fc 01       	movw	r30, r24
     bae:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     bb0:	44 8d       	ldd	r20, Z+28	; 0x1c
     bb2:	25 2f       	mov	r18, r21
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	84 2f       	mov	r24, r20
     bb8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     bba:	82 1b       	sub	r24, r18
     bbc:	93 0b       	sbc	r25, r19
     bbe:	54 17       	cp	r21, r20
     bc0:	10 f0       	brcs	.+4      	; 0xbc6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     bc2:	cf 96       	adiw	r24, 0x3f	; 63
     bc4:	08 95       	ret
  return tail - head - 1;
     bc6:	01 97       	sbiw	r24, 0x01	; 1
}
     bc8:	08 95       	ret

00000bca <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bca:	85 e4       	ldi	r24, 0x45	; 69
     bcc:	97 e0       	ldi	r25, 0x07	; 7
     bce:	89 2b       	or	r24, r25
     bd0:	49 f0       	breq	.+18     	; 0xbe4 <_Z14serialEventRunv+0x1a>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	89 2b       	or	r24, r25
     bd8:	29 f0       	breq	.+10     	; 0xbe4 <_Z14serialEventRunv+0x1a>
     bda:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z17Serial0_availablev>
     bde:	81 11       	cpse	r24, r1
     be0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     be4:	08 95       	ret

00000be6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     be6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     be8:	84 8d       	ldd	r24, Z+28	; 0x1c
     bea:	df 01       	movw	r26, r30
     bec:	a8 0f       	add	r26, r24
     bee:	b1 1d       	adc	r27, r1
     bf0:	a3 5a       	subi	r26, 0xA3	; 163
     bf2:	bf 4f       	sbci	r27, 0xFF	; 255
     bf4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     bf6:	84 8d       	ldd	r24, Z+28	; 0x1c
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	8f 73       	andi	r24, 0x3F	; 63
     bfe:	99 27       	eor	r25, r25
     c00:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     c02:	a6 89       	ldd	r26, Z+22	; 0x16
     c04:	b7 89       	ldd	r27, Z+23	; 0x17
     c06:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     c08:	a0 89       	ldd	r26, Z+16	; 0x10
     c0a:	b1 89       	ldd	r27, Z+17	; 0x11
     c0c:	8c 91       	ld	r24, X
     c0e:	83 70       	andi	r24, 0x03	; 3
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     c14:	93 8d       	ldd	r25, Z+27	; 0x1b
     c16:	84 8d       	ldd	r24, Z+28	; 0x1c
     c18:	98 13       	cpse	r25, r24
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c1c:	02 88       	ldd	r0, Z+18	; 0x12
     c1e:	f3 89       	ldd	r31, Z+19	; 0x13
     c20:	e0 2d       	mov	r30, r0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7d       	andi	r24, 0xDF	; 223
     c26:	80 83       	st	Z, r24
     c28:	08 95       	ret

00000c2a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
  _written = true;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c40:	98 13       	cpse	r25, r24
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <_ZN14HardwareSerial5writeEh+0x24>
     c44:	e8 89       	ldd	r30, Y+16	; 0x10
     c46:	f9 89       	ldd	r31, Y+17	; 0x11
     c48:	80 81       	ld	r24, Z
     c4a:	85 fd       	sbrc	r24, 5
     c4c:	26 c0       	rjmp	.+76     	; 0xc9a <_ZN14HardwareSerial5writeEh+0x70>
     c4e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c50:	0b 8d       	ldd	r16, Y+27	; 0x1b
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	0f 5f       	subi	r16, 0xFF	; 255
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	0f 73       	andi	r16, 0x3F	; 63
     c5a:	11 27       	eor	r17, r17
     c5c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c60:	e8 12       	cpse	r14, r24
     c62:	0c c0       	rjmp	.+24     	; 0xc7c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	07 fc       	sbrc	r0, 7
     c68:	fa cf       	rjmp	.-12     	; 0xc5e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     c6a:	e8 89       	ldd	r30, Y+16	; 0x10
     c6c:	f9 89       	ldd	r31, Y+17	; 0x11
     c6e:	80 81       	ld	r24, Z
     c70:	85 ff       	sbrs	r24, 5
     c72:	f5 cf       	rjmp	.-22     	; 0xc5e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c7a:	f1 cf       	rjmp	.-30     	; 0xc5e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7e:	fe 01       	movw	r30, r28
     c80:	e8 0f       	add	r30, r24
     c82:	f1 1d       	adc	r31, r1
     c84:	e3 5a       	subi	r30, 0xA3	; 163
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c8a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c8c:	f8 94       	cli
    _tx_buffer_head = i;
     c8e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     c90:	ea 89       	ldd	r30, Y+18	; 0x12
     c92:	fb 89       	ldd	r31, Y+19	; 0x13
     c94:	80 81       	ld	r24, Z
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	0a c0       	rjmp	.+20     	; 0xcae <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c9a:	9f b7       	in	r25, 0x3f	; 63
     c9c:	f8 94       	cli
      *_udr = c;
     c9e:	ee 89       	ldd	r30, Y+22	; 0x16
     ca0:	ff 89       	ldd	r31, Y+23	; 0x17
     ca2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ca4:	e8 89       	ldd	r30, Y+16	; 0x10
     ca6:	f9 89       	ldd	r31, Y+17	; 0x11
     ca8:	80 81       	ld	r24, Z
     caa:	83 70       	andi	r24, 0x03	; 3
     cac:	80 64       	ori	r24, 0x40	; 64
     cae:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cb0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	08 95       	ret

00000cc4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     cca:	88 8d       	ldd	r24, Y+24	; 0x18
     ccc:	88 23       	and	r24, r24
     cce:	c9 f0       	breq	.+50     	; 0xd02 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     cd0:	ea 89       	ldd	r30, Y+18	; 0x12
     cd2:	fb 89       	ldd	r31, Y+19	; 0x13
     cd4:	80 81       	ld	r24, Z
     cd6:	85 fd       	sbrc	r24, 5
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <_ZN14HardwareSerial5flushEv+0x20>
     cda:	a8 89       	ldd	r26, Y+16	; 0x10
     cdc:	b9 89       	ldd	r27, Y+17	; 0x11
     cde:	8c 91       	ld	r24, X
     ce0:	86 fd       	sbrc	r24, 6
     ce2:	0f c0       	rjmp	.+30     	; 0xd02 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	07 fc       	sbrc	r0, 7
     ce8:	f5 cf       	rjmp	.-22     	; 0xcd4 <_ZN14HardwareSerial5flushEv+0x10>
     cea:	80 81       	ld	r24, Z
     cec:	85 ff       	sbrs	r24, 5
     cee:	f2 cf       	rjmp	.-28     	; 0xcd4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     cf0:	a8 89       	ldd	r26, Y+16	; 0x10
     cf2:	b9 89       	ldd	r27, Y+17	; 0x11
     cf4:	8c 91       	ld	r24, X
     cf6:	85 ff       	sbrs	r24, 5
     cf8:	ed cf       	rjmp	.-38     	; 0xcd4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     d00:	e7 cf       	rjmp	.-50     	; 0xcd0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	ec 01       	movw	r28, r24
     d18:	6a 01       	movw	r12, r20
     d1a:	7b 01       	movw	r14, r22
     d1c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     d1e:	e8 89       	ldd	r30, Y+16	; 0x10
     d20:	f9 89       	ldd	r31, Y+17	; 0x11
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d26:	41 15       	cp	r20, r1
     d28:	51 4e       	sbci	r21, 0xE1	; 225
     d2a:	61 05       	cpc	r22, r1
     d2c:	71 05       	cpc	r23, r1
     d2e:	b1 f0       	breq	.+44     	; 0xd5c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	79 e0       	ldi	r23, 0x09	; 9
     d34:	8d e3       	ldi	r24, 0x3D	; 61
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a7 01       	movw	r20, r14
     d3a:	96 01       	movw	r18, r12
     d3c:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodsi4>
     d40:	da 01       	movw	r26, r20
     d42:	c9 01       	movw	r24, r18
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	a1 09       	sbc	r26, r1
     d48:	b1 09       	sbc	r27, r1
     d4a:	b6 95       	lsr	r27
     d4c:	a7 95       	ror	r26
     d4e:	97 95       	ror	r25
     d50:	87 95       	ror	r24
     d52:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d54:	21 15       	cp	r18, r1
     d56:	80 e1       	ldi	r24, 0x10	; 16
     d58:	38 07       	cpc	r19, r24
     d5a:	a8 f0       	brcs	.+42     	; 0xd86 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     d5c:	e8 89       	ldd	r30, Y+16	; 0x10
     d5e:	f9 89       	ldd	r31, Y+17	; 0x11
     d60:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d62:	60 e8       	ldi	r22, 0x80	; 128
     d64:	74 e8       	ldi	r23, 0x84	; 132
     d66:	8e e1       	ldi	r24, 0x1E	; 30
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	a7 01       	movw	r20, r14
     d6c:	96 01       	movw	r18, r12
     d6e:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodsi4>
     d72:	da 01       	movw	r26, r20
     d74:	c9 01       	movw	r24, r18
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	a1 09       	sbc	r26, r1
     d7a:	b1 09       	sbc	r27, r1
     d7c:	b6 95       	lsr	r27
     d7e:	a7 95       	ror	r26
     d80:	97 95       	ror	r25
     d82:	87 95       	ror	r24
     d84:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d86:	ec 85       	ldd	r30, Y+12	; 0x0c
     d88:	fd 85       	ldd	r31, Y+13	; 0x0d
     d8a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     d8c:	ee 85       	ldd	r30, Y+14	; 0x0e
     d8e:	ff 85       	ldd	r31, Y+15	; 0x0f
     d90:	20 83       	st	Z, r18

  _written = false;
     d92:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     d94:	ec 89       	ldd	r30, Y+20	; 0x14
     d96:	fd 89       	ldd	r31, Y+21	; 0x15
     d98:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     d9a:	ea 89       	ldd	r30, Y+18	; 0x12
     d9c:	fb 89       	ldd	r31, Y+19	; 0x13
     d9e:	80 81       	ld	r24, Z
     da0:	80 61       	ori	r24, 0x10	; 16
     da2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     da4:	ea 89       	ldd	r30, Y+18	; 0x12
     da6:	fb 89       	ldd	r31, Y+19	; 0x13
     da8:	80 81       	ld	r24, Z
     daa:	88 60       	ori	r24, 0x08	; 8
     dac:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     dae:	ea 89       	ldd	r30, Y+18	; 0x12
     db0:	fb 89       	ldd	r31, Y+19	; 0x13
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     db8:	ea 89       	ldd	r30, Y+18	; 0x12
     dba:	fb 89       	ldd	r31, Y+19	; 0x13
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 7d       	andi	r24, 0xDF	; 223
     dc0:	80 83       	st	Z, r24
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	08 95       	ret

00000dd2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	08 95       	ret

00000dd8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     dd8:	08 95       	ret

00000dda <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	2f 93       	push	r18
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     dee:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <Serial+0x10>
     df2:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <Serial+0x11>
     df6:	80 81       	ld	r24, Z
     df8:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <Serial+0x16>
     dfc:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <Serial+0x17>
     e00:	82 fd       	sbrc	r24, 2
     e02:	12 c0       	rjmp	.+36     	; 0xe28 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e04:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e06:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Serial+0x19>
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e0e:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <Serial+0x1a>
     e12:	82 17       	cp	r24, r18
     e14:	51 f0       	breq	.+20     	; 0xe2a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     e16:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <Serial+0x19>
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	e9 5f       	subi	r30, 0xF9	; 249
     e1e:	fd 4f       	sbci	r31, 0xFD	; 253
     e20:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     e22:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Serial+0x19>
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e28:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	9f 91       	pop	r25
     e30:	8f 91       	pop	r24
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     e60:	87 e0       	ldi	r24, 0x07	; 7
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     e8a:	87 e0       	ldi	r24, 0x07	; 7
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN14HardwareSerial9availableEv>
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	89 2b       	or	r24, r25
     e96:	09 f4       	brne	.+2      	; 0xe9a <_Z17Serial0_availablev+0x10>
     e98:	20 e0       	ldi	r18, 0x00	; 0
}
     e9a:	82 2f       	mov	r24, r18
     e9c:	08 95       	ret

00000e9e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e9e:	e7 e0       	ldi	r30, 0x07	; 7
     ea0:	f2 e0       	ldi	r31, 0x02	; 2
     ea2:	13 82       	std	Z+3, r1	; 0x03
     ea4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     ea6:	88 ee       	ldi	r24, 0xE8	; 232
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	84 83       	std	Z+4, r24	; 0x04
     eb0:	95 83       	std	Z+5, r25	; 0x05
     eb2:	a6 83       	std	Z+6, r26	; 0x06
     eb4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     eb6:	80 ea       	ldi	r24, 0xA0	; 160
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
     ebe:	85 ec       	ldi	r24, 0xC5	; 197
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	95 87       	std	Z+13, r25	; 0x0d
     ec4:	84 87       	std	Z+12, r24	; 0x0c
     ec6:	84 ec       	ldi	r24, 0xC4	; 196
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	97 87       	std	Z+15, r25	; 0x0f
     ecc:	86 87       	std	Z+14, r24	; 0x0e
     ece:	80 ec       	ldi	r24, 0xC0	; 192
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	91 8b       	std	Z+17, r25	; 0x11
     ed4:	80 8b       	std	Z+16, r24	; 0x10
     ed6:	81 ec       	ldi	r24, 0xC1	; 193
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	93 8b       	std	Z+19, r25	; 0x13
     edc:	82 8b       	std	Z+18, r24	; 0x12
     ede:	82 ec       	ldi	r24, 0xC2	; 194
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	95 8b       	std	Z+21, r25	; 0x15
     ee4:	84 8b       	std	Z+20, r24	; 0x14
     ee6:	86 ec       	ldi	r24, 0xC6	; 198
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	97 8b       	std	Z+23, r25	; 0x17
     eec:	86 8b       	std	Z+22, r24	; 0x16
     eee:	11 8e       	std	Z+25, r1	; 0x19
     ef0:	12 8e       	std	Z+26, r1	; 0x1a
     ef2:	13 8e       	std	Z+27, r1	; 0x1b
     ef4:	14 8e       	std	Z+28, r1	; 0x1c
     ef6:	08 95       	ret

00000ef8 <initVariant>:
     ef8:	08 95       	ret

00000efa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     efa:	0e 94 91 08 	call	0x1122	; 0x1122 <init>

	initVariant();
     efe:	0e 94 7c 07 	call	0xef8	; 0xef8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     f02:	0e 94 39 01 	call	0x272	; 0x272 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     f06:	c5 ee       	ldi	r28, 0xE5	; 229
     f08:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     f0a:	0e 94 3a 04 	call	0x874	; 0x874 <loop>
		if (serialEventRun) serialEventRun();
     f0e:	20 97       	sbiw	r28, 0x00	; 0
     f10:	e1 f3       	breq	.-8      	; 0xf0a <main+0x10>
     f12:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z14serialEventRunv>
     f16:	f9 cf       	rjmp	.-14     	; 0xf0a <main+0x10>

00000f18 <_ZN5Print5writeEPKhj>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	6c 01       	movw	r12, r24
     f2a:	7a 01       	movw	r14, r20
     f2c:	8b 01       	movw	r16, r22
     f2e:	c0 e0       	ldi	r28, 0x00	; 0
     f30:	d0 e0       	ldi	r29, 0x00	; 0
     f32:	ce 15       	cp	r28, r14
     f34:	df 05       	cpc	r29, r15
     f36:	81 f0       	breq	.+32     	; 0xf58 <_ZN5Print5writeEPKhj+0x40>
     f38:	d8 01       	movw	r26, r16
     f3a:	6d 91       	ld	r22, X+
     f3c:	8d 01       	movw	r16, r26
     f3e:	d6 01       	movw	r26, r12
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	01 90       	ld	r0, Z+
     f46:	f0 81       	ld	r31, Z
     f48:	e0 2d       	mov	r30, r0
     f4a:	c6 01       	movw	r24, r12
     f4c:	09 95       	icall
     f4e:	89 2b       	or	r24, r25
     f50:	11 f0       	breq	.+4      	; 0xf56 <_ZN5Print5writeEPKhj+0x3e>
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	ee cf       	rjmp	.-36     	; 0xf32 <_ZN5Print5writeEPKhj+0x1a>
     f56:	7e 01       	movw	r14, r28
     f58:	c7 01       	movw	r24, r14
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	08 95       	ret

00000f6c <_ZN5Print5writeEPKc>:
     f6c:	61 15       	cp	r22, r1
     f6e:	71 05       	cpc	r23, r1
     f70:	79 f0       	breq	.+30     	; 0xf90 <_ZN5Print5writeEPKc+0x24>
     f72:	fb 01       	movw	r30, r22
     f74:	01 90       	ld	r0, Z+
     f76:	00 20       	and	r0, r0
     f78:	e9 f7       	brne	.-6      	; 0xf74 <_ZN5Print5writeEPKc+0x8>
     f7a:	31 97       	sbiw	r30, 0x01	; 1
     f7c:	af 01       	movw	r20, r30
     f7e:	46 1b       	sub	r20, r22
     f80:	57 0b       	sbc	r21, r23
     f82:	dc 01       	movw	r26, r24
     f84:	ed 91       	ld	r30, X+
     f86:	fc 91       	ld	r31, X
     f88:	02 80       	ldd	r0, Z+2	; 0x02
     f8a:	f3 81       	ldd	r31, Z+3	; 0x03
     f8c:	e0 2d       	mov	r30, r0
     f8e:	09 94       	ijmp
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 95       	ret

00000f96 <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     f96:	db 01       	movw	r26, r22
     f98:	14 96       	adiw	r26, 0x04	; 4
     f9a:	4d 91       	ld	r20, X+
     f9c:	5c 91       	ld	r21, X
     f9e:	15 97       	sbiw	r26, 0x05	; 5
     fa0:	6d 91       	ld	r22, X+
     fa2:	7c 91       	ld	r23, X
     fa4:	dc 01       	movw	r26, r24
     fa6:	ed 91       	ld	r30, X+
     fa8:	fc 91       	ld	r31, X
     faa:	02 80       	ldd	r0, Z+2	; 0x02
     fac:	f3 81       	ldd	r31, Z+3	; 0x03
     fae:	e0 2d       	mov	r30, r0
     fb0:	09 94       	ijmp

00000fb2 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fb2:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <_ZN5Print5writeEPKc>

00000fb6 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <timer0_millis>
     fd0:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <timer0_millis+0x1>
     fd4:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <timer0_millis+0x2>
     fd8:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <timer0_millis+0x3>
     fdc:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <timer0_fract>
     fe0:	23 e0       	ldi	r18, 0x03	; 3
     fe2:	23 0f       	add	r18, r19
     fe4:	2d 37       	cpi	r18, 0x7D	; 125
     fe6:	20 f4       	brcc	.+8      	; 0xff0 <__vector_16+0x3a>
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	a1 1d       	adc	r26, r1
     fec:	b1 1d       	adc	r27, r1
     fee:	05 c0       	rjmp	.+10     	; 0xffa <__vector_16+0x44>
     ff0:	26 e8       	ldi	r18, 0x86	; 134
     ff2:	23 0f       	add	r18, r19
     ff4:	02 96       	adiw	r24, 0x02	; 2
     ff6:	a1 1d       	adc	r26, r1
     ff8:	b1 1d       	adc	r27, r1
     ffa:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <timer0_fract>
     ffe:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <timer0_millis>
    1002:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <timer0_millis+0x1>
    1006:	a0 93 a7 02 	sts	0x02A7, r26	; 0x8002a7 <timer0_millis+0x2>
    100a:	b0 93 a8 02 	sts	0x02A8, r27	; 0x8002a8 <timer0_millis+0x3>
    100e:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <timer0_overflow_count>
    1012:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <timer0_overflow_count+0x1>
    1016:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <timer0_overflow_count+0x2>
    101a:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <timer0_overflow_count+0x3>
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	a1 1d       	adc	r26, r1
    1022:	b1 1d       	adc	r27, r1
    1024:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <timer0_overflow_count>
    1028:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <timer0_overflow_count+0x1>
    102c:	a0 93 ab 02 	sts	0x02AB, r26	; 0x8002ab <timer0_overflow_count+0x2>
    1030:	b0 93 ac 02 	sts	0x02AC, r27	; 0x8002ac <timer0_overflow_count+0x3>
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	3f 91       	pop	r19
    103e:	2f 91       	pop	r18
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    104a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    104c:	f8 94       	cli
	m = timer0_overflow_count;
    104e:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <timer0_overflow_count>
    1052:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <timer0_overflow_count+0x1>
    1056:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <timer0_overflow_count+0x2>
    105a:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    105e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1060:	a8 9b       	sbis	0x15, 0	; 21
    1062:	05 c0       	rjmp	.+10     	; 0x106e <micros+0x24>
    1064:	2f 3f       	cpi	r18, 0xFF	; 255
    1066:	19 f0       	breq	.+6      	; 0x106e <micros+0x24>
		m++;
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	a1 1d       	adc	r26, r1
    106c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    106e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1070:	ba 2f       	mov	r27, r26
    1072:	a9 2f       	mov	r26, r25
    1074:	98 2f       	mov	r25, r24
    1076:	88 27       	eor	r24, r24
    1078:	82 0f       	add	r24, r18
    107a:	91 1d       	adc	r25, r1
    107c:	a1 1d       	adc	r26, r1
    107e:	b1 1d       	adc	r27, r1
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	42 e0       	ldi	r20, 0x02	; 2
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	4a 95       	dec	r20
    1090:	d1 f7       	brne	.-12     	; 0x1086 <micros+0x3c>
}
    1092:	08 95       	ret

00001094 <delay>:

void delay(unsigned long ms)
{
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    10a8:	0e 94 25 08 	call	0x104a	; 0x104a <micros>
    10ac:	4b 01       	movw	r8, r22
    10ae:	5c 01       	movw	r10, r24

	while (ms > 0) {
    10b0:	c1 14       	cp	r12, r1
    10b2:	d1 04       	cpc	r13, r1
    10b4:	e1 04       	cpc	r14, r1
    10b6:	f1 04       	cpc	r15, r1
    10b8:	01 f1       	breq	.+64     	; 0x10fa <delay+0x66>
		yield();
    10ba:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    10be:	0e 94 25 08 	call	0x104a	; 0x104a <micros>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	88 19       	sub	r24, r8
    10c8:	99 09       	sbc	r25, r9
    10ca:	aa 09       	sbc	r26, r10
    10cc:	bb 09       	sbc	r27, r11
    10ce:	88 3e       	cpi	r24, 0xE8	; 232
    10d0:	93 40       	sbci	r25, 0x03	; 3
    10d2:	a1 05       	cpc	r26, r1
    10d4:	b1 05       	cpc	r27, r1
    10d6:	60 f3       	brcs	.-40     	; 0x10b0 <delay+0x1c>
			ms--;
    10d8:	21 e0       	ldi	r18, 0x01	; 1
    10da:	c2 1a       	sub	r12, r18
    10dc:	d1 08       	sbc	r13, r1
    10de:	e1 08       	sbc	r14, r1
    10e0:	f1 08       	sbc	r15, r1
			start += 1000;
    10e2:	88 ee       	ldi	r24, 0xE8	; 232
    10e4:	88 0e       	add	r8, r24
    10e6:	83 e0       	ldi	r24, 0x03	; 3
    10e8:	98 1e       	adc	r9, r24
    10ea:	a1 1c       	adc	r10, r1
    10ec:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    10ee:	c1 14       	cp	r12, r1
    10f0:	d1 04       	cpc	r13, r1
    10f2:	e1 04       	cpc	r14, r1
    10f4:	f1 04       	cpc	r15, r1
    10f6:	19 f7       	brne	.-58     	; 0x10be <delay+0x2a>
    10f8:	db cf       	rjmp	.-74     	; 0x10b0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	9f 90       	pop	r9
    1108:	8f 90       	pop	r8
    110a:	08 95       	ret

0000110c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    110c:	82 30       	cpi	r24, 0x02	; 2
    110e:	91 05       	cpc	r25, r1
    1110:	38 f0       	brcs	.+14     	; 0x1120 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    111a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <delayMicroseconds+0x10>
    1120:	08 95       	ret

00001122 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1122:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1124:	84 b5       	in	r24, 0x24	; 36
    1126:	82 60       	ori	r24, 0x02	; 2
    1128:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    112a:	84 b5       	in	r24, 0x24	; 36
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1130:	85 b5       	in	r24, 0x25	; 37
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1136:	85 b5       	in	r24, 0x25	; 37
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    113c:	ee e6       	ldi	r30, 0x6E	; 110
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	81 60       	ori	r24, 0x01	; 1
    1144:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1146:	e1 e8       	ldi	r30, 0x81	; 129
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    114c:	80 81       	ld	r24, Z
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1152:	80 81       	ld	r24, Z
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1158:	e0 e8       	ldi	r30, 0x80	; 128
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1162:	e1 eb       	ldi	r30, 0xB1	; 177
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	84 60       	ori	r24, 0x04	; 4
    116a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    116c:	e0 eb       	ldi	r30, 0xB0	; 176
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1176:	ea e7       	ldi	r30, 0x7A	; 122
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	84 60       	ori	r24, 0x04	; 4
    117e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1186:	80 81       	ld	r24, Z
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    118c:	80 81       	ld	r24, Z
    118e:	80 68       	ori	r24, 0x80	; 128
    1190:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1192:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1196:	08 95       	ret

00001198 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	81 f0       	breq	.+32     	; 0x11bc <turnOffPWM+0x24>
    119c:	28 f4       	brcc	.+10     	; 0x11a8 <turnOffPWM+0x10>
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	99 f0       	breq	.+38     	; 0x11c8 <turnOffPWM+0x30>
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	a1 f0       	breq	.+40     	; 0x11ce <turnOffPWM+0x36>
    11a6:	08 95       	ret
    11a8:	87 30       	cpi	r24, 0x07	; 7
    11aa:	a9 f0       	breq	.+42     	; 0x11d6 <turnOffPWM+0x3e>
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	b9 f0       	breq	.+46     	; 0x11de <turnOffPWM+0x46>
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	d1 f4       	brne	.+52     	; 0x11e8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11b8:	8f 7d       	andi	r24, 0xDF	; 223
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    11bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11c0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11c6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    11c8:	84 b5       	in	r24, 0x24	; 36
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    11ce:	84 b5       	in	r24, 0x24	; 36
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	84 bd       	out	0x24, r24	; 36
    11d4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11da:	8f 77       	andi	r24, 0x7F	; 127
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    11de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11e2:	8f 7d       	andi	r24, 0xDF	; 223
    11e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11e8:	08 95       	ret

000011ea <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	ef 54       	subi	r30, 0x4F	; 79
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    11f8:	fc 01       	movw	r30, r24
    11fa:	eb 53       	subi	r30, 0x3B	; 59
    11fc:	fe 4f       	sbci	r31, 0xFE	; 254
    11fe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1200:	88 23       	and	r24, r24
    1202:	61 f1       	breq	.+88     	; 0x125c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	fc 01       	movw	r30, r24
    120c:	ed 51       	subi	r30, 0x1D	; 29
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	c5 91       	lpm	r28, Z+
    1212:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1214:	fc 01       	movw	r30, r24
    1216:	e7 52       	subi	r30, 0x27	; 39
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	a5 91       	lpm	r26, Z+
    121c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    121e:	61 11       	cpse	r22, r1
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1222:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1224:	f8 94       	cli
		*reg &= ~bit;
    1226:	88 81       	ld	r24, Y
    1228:	20 95       	com	r18
    122a:	82 23       	and	r24, r18
    122c:	88 83       	st	Y, r24
		*out &= ~bit;
    122e:	ec 91       	ld	r30, X
    1230:	2e 23       	and	r18, r30
    1232:	0b c0       	rjmp	.+22     	; 0x124a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1234:	62 30       	cpi	r22, 0x02	; 2
    1236:	61 f4       	brne	.+24     	; 0x1250 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1238:	9f b7       	in	r25, 0x3f	; 63
                cli();
    123a:	f8 94       	cli
		*reg &= ~bit;
    123c:	88 81       	ld	r24, Y
    123e:	32 2f       	mov	r19, r18
    1240:	30 95       	com	r19
    1242:	83 23       	and	r24, r19
    1244:	88 83       	st	Y, r24
		*out |= bit;
    1246:	ec 91       	ld	r30, X
    1248:	2e 2b       	or	r18, r30
    124a:	2c 93       	st	X, r18
		SREG = oldSREG;
    124c:	9f bf       	out	0x3f, r25	; 63
    124e:	06 c0       	rjmp	.+12     	; 0x125c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1250:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1252:	f8 94       	cli
		*reg |= bit;
    1254:	e8 81       	ld	r30, Y
    1256:	2e 2b       	or	r18, r30
    1258:	28 83       	st	Y, r18
		SREG = oldSREG;
    125a:	8f bf       	out	0x3f, r24	; 63
	}
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	f9 01       	movw	r30, r18
    126e:	e3 56       	subi	r30, 0x63	; 99
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1274:	f9 01       	movw	r30, r18
    1276:	ef 54       	subi	r30, 0x4F	; 79
    1278:	fe 4f       	sbci	r31, 0xFE	; 254
    127a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    127c:	f9 01       	movw	r30, r18
    127e:	eb 53       	subi	r30, 0x3B	; 59
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1284:	cc 23       	and	r28, r28
    1286:	c1 f0       	breq	.+48     	; 0x12b8 <digitalWrite+0x56>
    1288:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    128a:	81 11       	cpse	r24, r1
    128c:	0e 94 cc 08 	call	0x1198	; 0x1198 <turnOffPWM>

	out = portOutputRegister(port);
    1290:	ec 2f       	mov	r30, r28
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	e7 52       	subi	r30, 0x27	; 39
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	a5 91       	lpm	r26, Z+
    129e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    12a0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    12a2:	f8 94       	cli

	if (val == LOW) {
    12a4:	11 11       	cpse	r17, r1
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <digitalWrite+0x4e>
		*out &= ~bit;
    12a8:	8c 91       	ld	r24, X
    12aa:	d0 95       	com	r29
    12ac:	d8 23       	and	r29, r24
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    12b0:	ec 91       	ld	r30, X
    12b2:	de 2b       	or	r29, r30
    12b4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    12b6:	9f bf       	out	0x3f, r25	; 63
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	08 95       	ret

000012c0 <_ZNK6String14StringIfHelperEv>:

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
	return 0;
}
    12c0:	08 95       	ret

000012c2 <_ZN6StringD1Ev>:
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	0c 94 36 11 	jmp	0x226c	; 0x226c <free>

000012cc <_ZN6String10invalidateEv>:
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	ec 01       	movw	r28, r24
    12d2:	88 81       	ld	r24, Y
    12d4:	99 81       	ldd	r25, Y+1	; 0x01
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	11 f0       	breq	.+4      	; 0x12de <_ZN6String10invalidateEv+0x12>
    12da:	0e 94 36 11 	call	0x226c	; 0x226c <free>
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	18 82       	st	Y, r1
    12e2:	1d 82       	std	Y+5, r1	; 0x05
    12e4:	1c 82       	std	Y+4, r1	; 0x04
    12e6:	1b 82       	std	Y+3, r1	; 0x03
    12e8:	1a 82       	std	Y+2, r1	; 0x02
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <_ZN6String12changeBufferEj>:
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	ec 01       	movw	r28, r24
    12fa:	8b 01       	movw	r16, r22
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	88 81       	ld	r24, Y
    1302:	99 81       	ldd	r25, Y+1	; 0x01
    1304:	0e 94 bf 11 	call	0x237e	; 0x237e <realloc>
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	31 f0       	breq	.+12     	; 0x1318 <_ZN6String12changeBufferEj+0x28>
    130c:	99 83       	std	Y+1, r25	; 0x01
    130e:	88 83       	st	Y, r24
    1310:	1b 83       	std	Y+3, r17	; 0x03
    1312:	0a 83       	std	Y+2, r16	; 0x02
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	01 c0       	rjmp	.+2      	; 0x131a <_ZN6String12changeBufferEj+0x2a>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <_ZN6String7reserveEj>:
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ec 01       	movw	r28, r24
    132a:	88 81       	ld	r24, Y
    132c:	99 81       	ldd	r25, Y+1	; 0x01
    132e:	89 2b       	or	r24, r25
    1330:	29 f0       	breq	.+10     	; 0x133c <_ZN6String7reserveEj+0x18>
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	86 17       	cp	r24, r22
    1338:	97 07       	cpc	r25, r23
    133a:	60 f4       	brcc	.+24     	; 0x1354 <_ZN6String7reserveEj+0x30>
    133c:	ce 01       	movw	r24, r28
    133e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN6String12changeBufferEj>
    1342:	88 23       	and	r24, r24
    1344:	41 f0       	breq	.+16     	; 0x1356 <_ZN6String7reserveEj+0x32>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	89 2b       	or	r24, r25
    134c:	19 f4       	brne	.+6      	; 0x1354 <_ZN6String7reserveEj+0x30>
    134e:	e8 81       	ld	r30, Y
    1350:	f9 81       	ldd	r31, Y+1	; 0x01
    1352:	10 82       	st	Z, r1
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <_ZN6String4copyEPKcj>:
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	ec 01       	movw	r28, r24
    136a:	7b 01       	movw	r14, r22
    136c:	8a 01       	movw	r16, r20
    136e:	ba 01       	movw	r22, r20
    1370:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN6String7reserveEj>
    1374:	81 11       	cpse	r24, r1
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <_ZN6String4copyEPKcj+0x24>
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6String10invalidateEv>
    137e:	07 c0       	rjmp	.+14     	; 0x138e <_ZN6String4copyEPKcj+0x32>
    1380:	1d 83       	std	Y+5, r17	; 0x05
    1382:	0c 83       	std	Y+4, r16	; 0x04
    1384:	b7 01       	movw	r22, r14
    1386:	88 81       	ld	r24, Y
    1388:	99 81       	ldd	r25, Y+1	; 0x01
    138a:	0e 94 9b 12 	call	0x2536	; 0x2536 <strcpy>
    138e:	ce 01       	movw	r24, r28
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	08 95       	ret

0000139e <_ZN6StringC1EPKc>:
    139e:	fc 01       	movw	r30, r24
    13a0:	11 82       	std	Z+1, r1	; 0x01
    13a2:	10 82       	st	Z, r1
    13a4:	13 82       	std	Z+3, r1	; 0x03
    13a6:	12 82       	std	Z+2, r1	; 0x02
    13a8:	15 82       	std	Z+5, r1	; 0x05
    13aa:	14 82       	std	Z+4, r1	; 0x04
    13ac:	61 15       	cp	r22, r1
    13ae:	71 05       	cpc	r23, r1
    13b0:	51 f0       	breq	.+20     	; 0x13c6 <_ZN6StringC1EPKc+0x28>
    13b2:	fb 01       	movw	r30, r22
    13b4:	01 90       	ld	r0, Z+
    13b6:	00 20       	and	r0, r0
    13b8:	e9 f7       	brne	.-6      	; 0x13b4 <_ZN6StringC1EPKc+0x16>
    13ba:	31 97       	sbiw	r30, 0x01	; 1
    13bc:	af 01       	movw	r20, r30
    13be:	46 1b       	sub	r20, r22
    13c0:	57 0b       	sbc	r21, r23
    13c2:	0c 94 ae 09 	jmp	0x135c	; 0x135c <_ZN6String4copyEPKcj>
    13c6:	08 95       	ret

000013c8 <_ZN6String4moveERS_>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	8c 01       	movw	r16, r24
    13d2:	eb 01       	movw	r28, r22
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	d1 f0       	breq	.+52     	; 0x1412 <_ZN6String4moveERS_+0x4a>
    13de:	68 81       	ld	r22, Y
    13e0:	79 81       	ldd	r23, Y+1	; 0x01
    13e2:	61 15       	cp	r22, r1
    13e4:	71 05       	cpc	r23, r1
    13e6:	99 f0       	breq	.+38     	; 0x140e <_ZN6String4moveERS_+0x46>
    13e8:	20 e6       	ldi	r18, 0x60	; 96
    13ea:	39 e0       	ldi	r19, 0x09	; 9
    13ec:	23 2b       	or	r18, r19
    13ee:	79 f0       	breq	.+30     	; 0x140e <_ZN6String4moveERS_+0x46>
    13f0:	42 81       	ldd	r20, Z+2	; 0x02
    13f2:	53 81       	ldd	r21, Z+3	; 0x03
    13f4:	2c 81       	ldd	r18, Y+4	; 0x04
    13f6:	3d 81       	ldd	r19, Y+5	; 0x05
    13f8:	42 17       	cp	r20, r18
    13fa:	53 07       	cpc	r21, r19
    13fc:	40 f0       	brcs	.+16     	; 0x140e <_ZN6String4moveERS_+0x46>
    13fe:	0e 94 9b 12 	call	0x2536	; 0x2536 <strcpy>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	f8 01       	movw	r30, r16
    1408:	95 83       	std	Z+5, r25	; 0x05
    140a:	84 83       	std	Z+4, r24	; 0x04
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <_ZN6String4moveERS_+0x6c>
    140e:	0e 94 36 11 	call	0x226c	; 0x226c <free>
    1412:	88 81       	ld	r24, Y
    1414:	99 81       	ldd	r25, Y+1	; 0x01
    1416:	f8 01       	movw	r30, r16
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	93 83       	std	Z+3, r25	; 0x03
    1422:	82 83       	std	Z+2, r24	; 0x02
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	95 83       	std	Z+5, r25	; 0x05
    142a:	84 83       	std	Z+4, r24	; 0x04
    142c:	19 82       	std	Y+1, r1	; 0x01
    142e:	18 82       	st	Y, r1
    1430:	1b 82       	std	Y+3, r1	; 0x03
    1432:	1a 82       	std	Y+2, r1	; 0x02
    1434:	1d 82       	std	Y+5, r1	; 0x05
    1436:	1c 82       	std	Y+4, r1	; 0x04
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	08 95       	ret

00001442 <_ZN6StringaSERKS_>:
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
    1448:	fb 01       	movw	r30, r22
    144a:	86 17       	cp	r24, r22
    144c:	97 07       	cpc	r25, r23
    144e:	61 f0       	breq	.+24     	; 0x1468 <_ZN6StringaSERKS_+0x26>
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	61 15       	cp	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	29 f0       	breq	.+10     	; 0x1464 <_ZN6StringaSERKS_+0x22>
    145a:	44 81       	ldd	r20, Z+4	; 0x04
    145c:	55 81       	ldd	r21, Z+5	; 0x05
    145e:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN6String4copyEPKcj>
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <_ZN6StringaSERKS_+0x26>
    1464:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6String10invalidateEv>
    1468:	ce 01       	movw	r24, r28
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <_ZN6StringC1ERKS_>:
    1470:	fc 01       	movw	r30, r24
    1472:	11 82       	std	Z+1, r1	; 0x01
    1474:	10 82       	st	Z, r1
    1476:	13 82       	std	Z+3, r1	; 0x03
    1478:	12 82       	std	Z+2, r1	; 0x02
    147a:	15 82       	std	Z+5, r1	; 0x05
    147c:	14 82       	std	Z+4, r1	; 0x04
    147e:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <_ZN6StringaSERKS_>

00001482 <_ZN6StringaSEOS_>:
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	ec 01       	movw	r28, r24
    1488:	86 17       	cp	r24, r22
    148a:	97 07       	cpc	r25, r23
    148c:	11 f0       	breq	.+4      	; 0x1492 <_ZN6StringaSEOS_+0x10>
    148e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN6String4moveERS_>
    1492:	ce 01       	movw	r24, r28
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <_ZN6StringaSEPKc>:
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	ec 01       	movw	r28, r24
    14a0:	61 15       	cp	r22, r1
    14a2:	71 05       	cpc	r23, r1
    14a4:	59 f0       	breq	.+22     	; 0x14bc <_ZN6StringaSEPKc+0x22>
    14a6:	fb 01       	movw	r30, r22
    14a8:	01 90       	ld	r0, Z+
    14aa:	00 20       	and	r0, r0
    14ac:	e9 f7       	brne	.-6      	; 0x14a8 <_ZN6StringaSEPKc+0xe>
    14ae:	31 97       	sbiw	r30, 0x01	; 1
    14b0:	af 01       	movw	r20, r30
    14b2:	46 1b       	sub	r20, r22
    14b4:	57 0b       	sbc	r21, r23
    14b6:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN6String4copyEPKcj>
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <_ZN6StringaSEPKc+0x26>
    14bc:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6String10invalidateEv>
    14c0:	ce 01       	movw	r24, r28
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <_ZN6StringC1Eih>:
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	62 97       	sbiw	r28, 0x12	; 18
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	8c 01       	movw	r16, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	f8 01       	movw	r30, r16
    14e6:	11 82       	std	Z+1, r1	; 0x01
    14e8:	10 82       	st	Z, r1
    14ea:	13 82       	std	Z+3, r1	; 0x03
    14ec:	12 82       	std	Z+2, r1	; 0x02
    14ee:	15 82       	std	Z+5, r1	; 0x05
    14f0:	14 82       	std	Z+4, r1	; 0x04
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	be 01       	movw	r22, r28
    14f6:	6f 5f       	subi	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	0e 94 b0 12 	call	0x2560	; 0x2560 <itoa>
    14fe:	be 01       	movw	r22, r28
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	c8 01       	movw	r24, r16
    1506:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN6StringaSEPKc>
    150a:	62 96       	adiw	r28, 0x12	; 18
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <_ZN6StringC1Efh>:
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	a1 97       	sbiw	r28, 0x21	; 33
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	7c 01       	movw	r14, r24
    153e:	cb 01       	movw	r24, r22
    1540:	ba 01       	movw	r22, r20
    1542:	f7 01       	movw	r30, r14
    1544:	11 82       	std	Z+1, r1	; 0x01
    1546:	10 82       	st	Z, r1
    1548:	13 82       	std	Z+3, r1	; 0x03
    154a:	12 82       	std	Z+2, r1	; 0x02
    154c:	15 82       	std	Z+5, r1	; 0x05
    154e:	14 82       	std	Z+4, r1	; 0x04
    1550:	42 e0       	ldi	r20, 0x02	; 2
    1552:	42 0f       	add	r20, r18
    1554:	8e 01       	movw	r16, r28
    1556:	0f 5f       	subi	r16, 0xFF	; 255
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dtostrf>
    155e:	bc 01       	movw	r22, r24
    1560:	c7 01       	movw	r24, r14
    1562:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN6StringaSEPKc>
    1566:	a1 96       	adiw	r28, 0x21	; 33
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	08 95       	ret

00001580 <_ZN6String6concatEPKcj>:
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	61 15       	cp	r22, r1
    158e:	71 05       	cpc	r23, r1
    1590:	11 f4       	brne	.+4      	; 0x1596 <_ZN6String6concatEPKcj+0x16>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	1c c0       	rjmp	.+56     	; 0x15ce <_ZN6String6concatEPKcj+0x4e>
    1596:	41 15       	cp	r20, r1
    1598:	51 05       	cpc	r21, r1
    159a:	c1 f0       	breq	.+48     	; 0x15cc <_ZN6String6concatEPKcj+0x4c>
    159c:	7b 01       	movw	r14, r22
    159e:	ec 01       	movw	r28, r24
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	8a 01       	movw	r16, r20
    15a6:	08 0f       	add	r16, r24
    15a8:	19 1f       	adc	r17, r25
    15aa:	b8 01       	movw	r22, r16
    15ac:	ce 01       	movw	r24, r28
    15ae:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN6String7reserveEj>
    15b2:	88 23       	and	r24, r24
    15b4:	71 f3       	breq	.-36     	; 0x1592 <_ZN6String6concatEPKcj+0x12>
    15b6:	28 81       	ld	r18, Y
    15b8:	39 81       	ldd	r19, Y+1	; 0x01
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	b7 01       	movw	r22, r14
    15c0:	82 0f       	add	r24, r18
    15c2:	93 1f       	adc	r25, r19
    15c4:	0e 94 9b 12 	call	0x2536	; 0x2536 <strcpy>
    15c8:	1d 83       	std	Y+5, r17	; 0x05
    15ca:	0c 83       	std	Y+4, r16	; 0x04
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	08 95       	ret

000015dc <_ZN6String6concatEc>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <_ZN6String6concatEc+0x6>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	69 83       	std	Y+1, r22	; 0x01
    15e8:	1a 82       	std	Y+2, r1	; 0x02
    15ea:	41 e0       	ldi	r20, 0x01	; 1
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	be 01       	movw	r22, r28
    15f0:	6f 5f       	subi	r22, 0xFF	; 255
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN6String6concatEPKcj>
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <_ZplRK15StringSumHelperRK6String>:
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	ec 01       	movw	r28, r24
    1608:	fb 01       	movw	r30, r22
    160a:	44 81       	ldd	r20, Z+4	; 0x04
    160c:	55 81       	ldd	r21, Z+5	; 0x05
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN6String6concatEPKcj>
    1616:	81 11       	cpse	r24, r1
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <_ZplRK15StringSumHelperRK6String+0x1e>
    161a:	ce 01       	movw	r24, r28
    161c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6String10invalidateEv>
    1620:	ce 01       	movw	r24, r28
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <_ZplRK15StringSumHelperPKc>:
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
    162e:	61 15       	cp	r22, r1
    1630:	71 05       	cpc	r23, r1
    1632:	61 f0       	breq	.+24     	; 0x164c <_ZplRK15StringSumHelperPKc+0x24>
    1634:	fb 01       	movw	r30, r22
    1636:	01 90       	ld	r0, Z+
    1638:	00 20       	and	r0, r0
    163a:	e9 f7       	brne	.-6      	; 0x1636 <_ZplRK15StringSumHelperPKc+0xe>
    163c:	31 97       	sbiw	r30, 0x01	; 1
    163e:	af 01       	movw	r20, r30
    1640:	46 1b       	sub	r20, r22
    1642:	57 0b       	sbc	r21, r23
    1644:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN6String6concatEPKcj>
    1648:	81 11       	cpse	r24, r1
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <_ZplRK15StringSumHelperPKc+0x2a>
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN6String10invalidateEv>
    1652:	ce 01       	movw	r24, r28
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <_ZNK6String10startsWithERKS_j>:
    165a:	db 01       	movw	r26, r22
    165c:	14 96       	adiw	r26, 0x04	; 4
    165e:	ed 91       	ld	r30, X+
    1660:	fc 91       	ld	r31, X
    1662:	15 97       	sbiw	r26, 0x05	; 5
    1664:	dc 01       	movw	r26, r24
    1666:	14 96       	adiw	r26, 0x04	; 4
    1668:	2d 91       	ld	r18, X+
    166a:	3c 91       	ld	r19, X
    166c:	15 97       	sbiw	r26, 0x05	; 5
    166e:	2e 1b       	sub	r18, r30
    1670:	3f 0b       	sbc	r19, r31
    1672:	24 17       	cp	r18, r20
    1674:	35 07       	cpc	r19, r21
    1676:	a0 f0       	brcs	.+40     	; 0x16a0 <_ZNK6String10startsWithERKS_j+0x46>
    1678:	2d 91       	ld	r18, X+
    167a:	3c 91       	ld	r19, X
    167c:	21 15       	cp	r18, r1
    167e:	31 05       	cpc	r19, r1
    1680:	79 f0       	breq	.+30     	; 0x16a0 <_ZNK6String10startsWithERKS_j+0x46>
    1682:	db 01       	movw	r26, r22
    1684:	6d 91       	ld	r22, X+
    1686:	7c 91       	ld	r23, X
    1688:	61 15       	cp	r22, r1
    168a:	71 05       	cpc	r23, r1
    168c:	49 f0       	breq	.+18     	; 0x16a0 <_ZNK6String10startsWithERKS_j+0x46>
    168e:	ca 01       	movw	r24, r20
    1690:	af 01       	movw	r20, r30
    1692:	82 0f       	add	r24, r18
    1694:	93 1f       	adc	r25, r19
    1696:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncmp>
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	89 2b       	or	r24, r25
    169e:	09 f0       	breq	.+2      	; 0x16a2 <_ZNK6String10startsWithERKS_j+0x48>
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	82 2f       	mov	r24, r18
    16a4:	08 95       	ret

000016a6 <_ZNK6String10startsWithERKS_>:
    16a6:	fc 01       	movw	r30, r24
    16a8:	44 81       	ldd	r20, Z+4	; 0x04
    16aa:	55 81       	ldd	r21, Z+5	; 0x05
    16ac:	fb 01       	movw	r30, r22
    16ae:	24 81       	ldd	r18, Z+4	; 0x04
    16b0:	35 81       	ldd	r19, Z+5	; 0x05
    16b2:	42 17       	cp	r20, r18
    16b4:	53 07       	cpc	r21, r19
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <_ZNK6String10startsWithERKS_+0x1a>
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <_ZNK6String10startsWithERKS_j>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	08 95       	ret

000016c4 <_ZNK6String9substringEjj>:
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	7c 01       	movw	r14, r24
    16d8:	6b 01       	movw	r12, r22
    16da:	8a 01       	movw	r16, r20
    16dc:	e9 01       	movw	r28, r18
    16de:	24 17       	cp	r18, r20
    16e0:	35 07       	cpc	r19, r21
    16e2:	20 f4       	brcc	.+8      	; 0x16ec <_ZNK6String9substringEjj+0x28>
    16e4:	81 2f       	mov	r24, r17
    16e6:	89 01       	movw	r16, r18
    16e8:	c4 2f       	mov	r28, r20
    16ea:	d8 2f       	mov	r29, r24
    16ec:	68 e7       	ldi	r22, 0x78	; 120
    16ee:	71 e0       	ldi	r23, 0x01	; 1
    16f0:	c7 01       	movw	r24, r14
    16f2:	0e 94 cf 09 	call	0x139e	; 0x139e <_ZN6StringC1EPKc>
    16f6:	d6 01       	movw	r26, r12
    16f8:	14 96       	adiw	r26, 0x04	; 4
    16fa:	8d 91       	ld	r24, X+
    16fc:	9c 91       	ld	r25, X
    16fe:	15 97       	sbiw	r26, 0x05	; 5
    1700:	08 17       	cp	r16, r24
    1702:	19 07       	cpc	r17, r25
    1704:	c8 f4       	brcc	.+50     	; 0x1738 <_ZNK6String9substringEjj+0x74>
    1706:	8c 17       	cp	r24, r28
    1708:	9d 07       	cpc	r25, r29
    170a:	08 f4       	brcc	.+2      	; 0x170e <_ZNK6String9substringEjj+0x4a>
    170c:	ec 01       	movw	r28, r24
    170e:	d6 01       	movw	r26, r12
    1710:	ed 91       	ld	r30, X+
    1712:	fc 91       	ld	r31, X
    1714:	11 97       	sbiw	r26, 0x01	; 1
    1716:	ec 0f       	add	r30, r28
    1718:	fd 1f       	adc	r31, r29
    171a:	b0 80       	ld	r11, Z
    171c:	10 82       	st	Z, r1
    171e:	6d 91       	ld	r22, X+
    1720:	7c 91       	ld	r23, X
    1722:	60 0f       	add	r22, r16
    1724:	71 1f       	adc	r23, r17
    1726:	c7 01       	movw	r24, r14
    1728:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN6StringaSEPKc>
    172c:	d6 01       	movw	r26, r12
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	ec 0f       	add	r30, r28
    1734:	fd 1f       	adc	r31, r29
    1736:	b0 82       	st	Z, r11
    1738:	c7 01       	movw	r24, r14
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	08 95       	ret

0000174e <_ZNK6String8toDoubleEv>:
	return float(toDouble());
}

double String::toDouble(void) const
{
	if (buffer) return atof(buffer);
    174e:	fc 01       	movw	r30, r24
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	11 f0       	breq	.+4      	; 0x175c <_ZNK6String8toDoubleEv+0xe>
    1758:	0c 94 85 12 	jmp	0x250a	; 0x250a <atof>
	return 0;
}
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	cb 01       	movw	r24, r22
    1762:	08 95       	ret

00001764 <_ZNK6String7toFloatEv>:
	return 0;
}

float String::toFloat(void) const
{
	return float(toDouble());
    1764:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <_ZNK6String8toDoubleEv>

00001768 <_ZN17LiquidCrystal_I2CC1Ehhhh>:
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
	createChar(char_num, rows);
    1768:	0f 93       	push	r16
    176a:	fc 01       	movw	r30, r24
    176c:	13 82       	std	Z+3, r1	; 0x03
    176e:	12 82       	std	Z+2, r1	; 0x02
    1770:	82 eb       	ldi	r24, 0xB2	; 178
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
    1778:	64 83       	std	Z+4, r22	; 0x04
    177a:	40 87       	std	Z+8, r20	; 0x08
    177c:	21 87       	std	Z+9, r18	; 0x09
    177e:	02 87       	std	Z+10, r16	; 0x0a
    1780:	88 e0       	ldi	r24, 0x08	; 8
    1782:	83 87       	std	Z+11, r24	; 0x0b
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
    1790:	16 2f       	mov	r17, r22
    1792:	6c 81       	ldd	r22, Y+4	; 0x04
    1794:	8d ea       	ldi	r24, 0xAD	; 173
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire17beginTransmissionEh>
    179c:	6b 85       	ldd	r22, Y+11	; 0x0b
    179e:	61 2b       	or	r22, r17
    17a0:	8d ea       	ldi	r24, 0xAD	; 173
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN7TwoWire5writeEh>
    17a8:	8d ea       	ldi	r24, 0xAD	; 173
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <_ZN7TwoWire15endTransmissionEv>

000017b6 <_ZN17LiquidCrystal_I2C9backlightEv>:
    17b6:	28 e0       	ldi	r18, 0x08	; 8
    17b8:	fc 01       	movw	r30, r24
    17ba:	23 87       	std	Z+11, r18	; 0x0b
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000017c2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	8c 01       	movw	r16, r24
    17ca:	c6 2f       	mov	r28, r22
    17cc:	64 60       	ori	r22, 0x04	; 4
    17ce:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 86 08 	call	0x110c	; 0x110c <delayMicroseconds>
    17da:	6c 2f       	mov	r22, r28
    17dc:	6b 7f       	andi	r22, 0xFB	; 251
    17de:	c8 01       	movw	r24, r16
    17e0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    17e4:	82 e3       	ldi	r24, 0x32	; 50
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	0c 94 86 08 	jmp	0x110c	; 0x110c <delayMicroseconds>

000017f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	ec 01       	movw	r28, r24
    17fa:	16 2f       	mov	r17, r22
    17fc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1800:	61 2f       	mov	r22, r17
    1802:	ce 01       	movw	r24, r28
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000180e <_ZN17LiquidCrystal_I2C4sendEhh>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	8c 01       	movw	r16, r24
    1818:	c6 2f       	mov	r28, r22
    181a:	d4 2f       	mov	r29, r20
    181c:	60 7f       	andi	r22, 0xF0	; 240
    181e:	64 2b       	or	r22, r20
    1820:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1824:	80 e1       	ldi	r24, 0x10	; 16
    1826:	c8 9f       	mul	r28, r24
    1828:	b0 01       	movw	r22, r0
    182a:	11 24       	eor	r1, r1
    182c:	6d 2b       	or	r22, r29
    182e:	c8 01       	movw	r24, r16
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000183c <_ZN17LiquidCrystal_I2C7commandEh>:
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0c 94 07 0c 	jmp	0x180e	; 0x180e <_ZN17LiquidCrystal_I2C4sendEhh>

00001842 <_ZN17LiquidCrystal_I2C5clearEv>:
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN17LiquidCrystal_I2C7commandEh>
    1848:	80 ed       	ldi	r24, 0xD0	; 208
    184a:	97 e0       	ldi	r25, 0x07	; 7
    184c:	0c 94 86 08 	jmp	0x110c	; 0x110c <delayMicroseconds>

00001850 <_ZN17LiquidCrystal_I2C4homeEv>:
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN17LiquidCrystal_I2C7commandEh>
    1856:	80 ed       	ldi	r24, 0xD0	; 208
    1858:	97 e0       	ldi	r25, 0x07	; 7
    185a:	0c 94 86 08 	jmp	0x110c	; 0x110c <delayMicroseconds>

0000185e <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	28 97       	sbiw	r28, 0x08	; 8
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	9c 01       	movw	r18, r24
    1874:	88 e0       	ldi	r24, 0x08	; 8
    1876:	e7 e0       	ldi	r30, 0x07	; 7
    1878:	f1 e0       	ldi	r31, 0x01	; 1
    187a:	de 01       	movw	r26, r28
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	01 90       	ld	r0, Z+
    1880:	0d 92       	st	X+, r0
    1882:	8a 95       	dec	r24
    1884:	e1 f7       	brne	.-8      	; 0x187e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    1886:	f9 01       	movw	r30, r18
    1888:	81 85       	ldd	r24, Z+9	; 0x09
    188a:	84 17       	cp	r24, r20
    188c:	10 f4       	brcc	.+4      	; 0x1892 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    188e:	4f ef       	ldi	r20, 0xFF	; 255
    1890:	48 0f       	add	r20, r24
    1892:	fe 01       	movw	r30, r28
    1894:	31 96       	adiw	r30, 0x01	; 1
    1896:	e4 0f       	add	r30, r20
    1898:	f1 1d       	adc	r31, r1
    189a:	e4 0f       	add	r30, r20
    189c:	f1 1d       	adc	r31, r1
    189e:	90 81       	ld	r25, Z
    18a0:	69 0f       	add	r22, r25
    18a2:	60 68       	ori	r22, 0x80	; 128
    18a4:	c9 01       	movw	r24, r18
    18a6:	28 96       	adiw	r28, 0x08	; 8
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <_ZN17LiquidCrystal_I2C7commandEh>

000018ba <_ZN17LiquidCrystal_I2C7displayEv>:
    18ba:	fc 01       	movw	r30, r24
    18bc:	66 81       	ldd	r22, Z+6	; 0x06
    18be:	26 2f       	mov	r18, r22
    18c0:	24 60       	ori	r18, 0x04	; 4
    18c2:	26 83       	std	Z+6, r18	; 0x06
    18c4:	6c 60       	ori	r22, 0x0C	; 12
    18c6:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <_ZN17LiquidCrystal_I2C7commandEh>

000018ca <_ZN17LiquidCrystal_I2C5writeEh>:
inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <_ZN17LiquidCrystal_I2C5beginEv>:
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
}

void LiquidCrystal_I2C::begin() {
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
	Wire.begin();
    18dc:	8d ea       	ldi	r24, 0xAD	; 173
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    18e4:	1d 82       	std	Y+5, r1	; 0x05

	if (_rows > 1) {
    18e6:	89 85       	ldd	r24, Y+9	; 0x09
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	10 f0       	brcs	.+4      	; 0x18f0 <_ZN17LiquidCrystal_I2C5beginEv+0x1a>
		_displayfunction |= LCD_2LINE;
    18ec:	98 e0       	ldi	r25, 0x08	; 8
    18ee:	9d 83       	std	Y+5, r25	; 0x05
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	99 23       	and	r25, r25
    18f4:	29 f0       	breq	.+10     	; 0x1900 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	19 f4       	brne	.+6      	; 0x1900 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
		_displayfunction |= LCD_5x10DOTS;
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	84 60       	ori	r24, 0x04	; 4
    18fe:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1900:	62 e3       	ldi	r22, 0x32	; 50
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 4a 08 	call	0x1094	; 0x1094 <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	ce 01       	movw	r24, r28
    1910:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1914:	68 ee       	ldi	r22, 0xE8	; 232
    1916:	73 e0       	ldi	r23, 0x03	; 3
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 4a 08 	call	0x1094	; 0x1094 <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    1920:	60 e3       	ldi	r22, 0x30	; 48
    1922:	ce 01       	movw	r24, r28
    1924:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    1928:	84 e9       	ldi	r24, 0x94	; 148
    192a:	91 e1       	ldi	r25, 0x11	; 17
    192c:	0e 94 86 08 	call	0x110c	; 0x110c <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
    1930:	60 e3       	ldi	r22, 0x30	; 48
    1932:	ce 01       	movw	r24, r28
    1934:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    1938:	84 e9       	ldi	r24, 0x94	; 148
    193a:	91 e1       	ldi	r25, 0x11	; 17
    193c:	0e 94 86 08 	call	0x110c	; 0x110c <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4); 
    1940:	60 e3       	ldi	r22, 0x30	; 48
    1942:	ce 01       	movw	r24, r28
    1944:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(150);
    1948:	86 e9       	ldi	r24, 0x96	; 150
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 86 08 	call	0x110c	; 0x110c <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4); 
    1950:	60 e2       	ldi	r22, 0x20	; 32
    1952:	ce 01       	movw	r24, r28
    1954:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN17LiquidCrystal_I2C10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1958:	6d 81       	ldd	r22, Y+5	; 0x05
    195a:	60 62       	ori	r22, 0x20	; 32
    195c:	ce 01       	movw	r24, r28
    195e:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1966:	ce 01       	movw	r24, r28
    1968:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    196c:	ce 01       	movw	r24, r28
    196e:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1976:	66 e0       	ldi	r22, 0x06	; 6
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    197e:	ce 01       	movw	r24, r28
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1984:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <_ZN17LiquidCrystal_I2C4homeEv>

00001988 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1988:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN7TwoWire14rxBufferLengthE>
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    1992:	82 1b       	sub	r24, r18
    1994:	91 09       	sbc	r25, r1
    1996:	08 95       	ret

00001998 <_ZN7TwoWire4readEv>:
    1998:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    199c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN7TwoWire14rxBufferLengthE>
    19a0:	98 17       	cp	r25, r24
    19a2:	50 f4       	brcc	.+20     	; 0x19b8 <_ZN7TwoWire4readEv+0x20>
    19a4:	e9 2f       	mov	r30, r25
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	ed 51       	subi	r30, 0x1D	; 29
    19aa:	fd 4f       	sbci	r31, 0xFD	; 253
    19ac:	20 81       	ld	r18, Z
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	9f 5f       	subi	r25, 0xFF	; 255
    19b2:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <_ZN7TwoWire4readEv+0x24>
    19b8:	2f ef       	ldi	r18, 0xFF	; 255
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	c9 01       	movw	r24, r18
    19be:	08 95       	ret

000019c0 <_ZN7TwoWire4peekEv>:
    19c0:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    19c4:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN7TwoWire14rxBufferLengthE>
    19c8:	e8 17       	cp	r30, r24
    19ca:	30 f4       	brcc	.+12     	; 0x19d8 <_ZN7TwoWire4peekEv+0x18>
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	ed 51       	subi	r30, 0x1D	; 29
    19d0:	fd 4f       	sbci	r31, 0xFD	; 253
    19d2:	80 81       	ld	r24, Z
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	08 95       	ret
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	08 95       	ret

000019de <_ZN7TwoWire5flushEv>:
    19de:	08 95       	ret

000019e0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
    19e6:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <_ZN7TwoWire14user_onReceiveE>
    19ea:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <_ZN7TwoWire14user_onReceiveE+0x1>
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	f1 f0       	breq	.+60     	; 0x1a2e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    19f2:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    19f6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN7TwoWire14rxBufferLengthE>
    19fa:	98 17       	cp	r25, r24
    19fc:	c0 f0       	brcs	.+48     	; 0x1a2e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	29 2f       	mov	r18, r25
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	26 17       	cp	r18, r22
    1a06:	37 07       	cpc	r19, r23
    1a08:	54 f4       	brge	.+20     	; 0x1a1e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1a0a:	de 01       	movw	r26, r28
    1a0c:	a2 0f       	add	r26, r18
    1a0e:	b3 1f       	adc	r27, r19
    1a10:	4c 91       	ld	r20, X
    1a12:	d9 01       	movw	r26, r18
    1a14:	ad 51       	subi	r26, 0x1D	; 29
    1a16:	bd 4f       	sbci	r27, 0xFD	; 253
    1a18:	4c 93       	st	X, r20
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	f1 cf       	rjmp	.-30     	; 0x1a00 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1a1e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    1a22:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <_ZN7TwoWire14rxBufferLengthE>
    1a26:	cb 01       	movw	r24, r22
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	09 94       	ijmp
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <_ZN7TwoWire16onRequestServiceEv>:
    1a34:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <_ZN7TwoWire14user_onRequestE>
    1a38:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <_ZN7TwoWire14user_onRequestE+0x1>
    1a3c:	30 97       	sbiw	r30, 0x00	; 0
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <_ZN7TwoWire16onRequestServiceEv+0x16>
    1a40:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <_ZN7TwoWire13txBufferIndexE>
    1a44:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1a48:	09 94       	ijmp
    1a4a:	08 95       	ret

00001a4c <_ZN7TwoWire5writeEPKhj>:
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	7c 01       	movw	r14, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8a 01       	movw	r16, r20
    1a62:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <_ZN7TwoWire12transmittingE>
    1a66:	22 23       	and	r18, r18
    1a68:	89 f0       	breq	.+34     	; 0x1a8c <_ZN7TwoWire5writeEPKhj+0x40>
    1a6a:	eb 01       	movw	r28, r22
    1a6c:	6b 01       	movw	r12, r22
    1a6e:	c4 0e       	add	r12, r20
    1a70:	d5 1e       	adc	r13, r21
    1a72:	cc 15       	cp	r28, r12
    1a74:	dd 05       	cpc	r29, r13
    1a76:	69 f0       	breq	.+26     	; 0x1a92 <_ZN7TwoWire5writeEPKhj+0x46>
    1a78:	69 91       	ld	r22, Y+
    1a7a:	d7 01       	movw	r26, r14
    1a7c:	ed 91       	ld	r30, X+
    1a7e:	fc 91       	ld	r31, X
    1a80:	01 90       	ld	r0, Z+
    1a82:	f0 81       	ld	r31, Z
    1a84:	e0 2d       	mov	r30, r0
    1a86:	c7 01       	movw	r24, r14
    1a88:	09 95       	icall
    1a8a:	f3 cf       	rjmp	.-26     	; 0x1a72 <_ZN7TwoWire5writeEPKhj+0x26>
    1a8c:	64 2f       	mov	r22, r20
    1a8e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <twi_transmit>
    1a92:	c8 01       	movw	r24, r16
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	08 95       	ret

00001aa6 <_ZN7TwoWire5writeEh>:
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	1f 92       	push	r1
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	69 83       	std	Y+1, r22	; 0x01
    1ab2:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <_ZN7TwoWire12transmittingE>
    1ab6:	22 23       	and	r18, r18
    1ab8:	d1 f0       	breq	.+52     	; 0x1aee <_ZN7TwoWire5writeEh+0x48>
    1aba:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1abe:	20 32       	cpi	r18, 0x20	; 32
    1ac0:	40 f0       	brcs	.+16     	; 0x1ad2 <_ZN7TwoWire5writeEh+0x2c>
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	33 83       	std	Z+3, r19	; 0x03
    1aca:	22 83       	std	Z+2, r18	; 0x02
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	15 c0       	rjmp	.+42     	; 0x1afc <_ZN7TwoWire5writeEh+0x56>
    1ad2:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <_ZN7TwoWire13txBufferIndexE>
    1ad6:	e8 2f       	mov	r30, r24
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	e0 54       	subi	r30, 0x40	; 64
    1adc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ade:	99 81       	ldd	r25, Y+1	; 0x01
    1ae0:	90 83       	st	Z, r25
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <_ZN7TwoWire13txBufferIndexE>
    1ae8:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <_ZN7TwoWire5writeEh+0x52>
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <twi_transmit>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0f 90       	pop	r0
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <_ZN7TwoWireC1Ev>:
    1b04:	fc 01       	movw	r30, r24
    1b06:	13 82       	std	Z+3, r1	; 0x03
    1b08:	12 82       	std	Z+2, r1	; 0x02
    1b0a:	88 ee       	ldi	r24, 0xE8	; 232
    1b0c:	93 e0       	ldi	r25, 0x03	; 3
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	84 83       	std	Z+4, r24	; 0x04
    1b14:	95 83       	std	Z+5, r25	; 0x05
    1b16:	a6 83       	std	Z+6, r26	; 0x06
    1b18:	b7 83       	std	Z+7, r27	; 0x07
    1b1a:	8e eb       	ldi	r24, 0xBE	; 190
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	08 95       	ret

00001b24 <_ZN7TwoWire5beginEv>:
    1b24:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <_ZN7TwoWire13rxBufferIndexE>
    1b28:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <_ZN7TwoWire14rxBufferLengthE>
    1b2c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <_ZN7TwoWire13txBufferIndexE>
    1b30:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1b34:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <twi_init>
    1b38:	8a e1       	ldi	r24, 0x1A	; 26
    1b3a:	9d e0       	ldi	r25, 0x0D	; 13
    1b3c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <twi_attachSlaveTxEvent>
    1b40:	80 ef       	ldi	r24, 0xF0	; 240
    1b42:	9c e0       	ldi	r25, 0x0C	; 12
    1b44:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <twi_attachSlaveRxEvent>

00001b48 <_ZN7TwoWire17beginTransmissionEh>:
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <_ZN7TwoWire12transmittingE>
    1b4e:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <_ZN7TwoWire9txAddressE>
    1b52:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <_ZN7TwoWire13txBufferIndexE>
    1b56:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1b5a:	08 95       	ret

00001b5c <_ZN7TwoWire15endTransmissionEh>:
    1b5c:	0f 93       	push	r16
    1b5e:	06 2f       	mov	r16, r22
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1b66:	60 ec       	ldi	r22, 0xC0	; 192
    1b68:	72 e0       	ldi	r23, 0x02	; 2
    1b6a:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZN7TwoWire9txAddressE>
    1b6e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <twi_writeTo>
    1b72:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <_ZN7TwoWire13txBufferIndexE>
    1b76:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <_ZN7TwoWire14txBufferLengthE>
    1b7a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <_ZN7TwoWire12transmittingE>
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <_ZN7TwoWire15endTransmissionEv>:
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <_ZN7TwoWire15endTransmissionEh>

00001b88 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1b88:	8d ea       	ldi	r24, 0xAD	; 173
    1b8a:	92 e0       	ldi	r25, 0x02	; 2
    1b8c:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <_ZN7TwoWireC1Ev>

00001b90 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1b90:	08 95       	ret

00001b92 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b92:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_sendStop>
    1b9c:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <twi_inRepStart>
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	82 e1       	ldi	r24, 0x12	; 18
    1ba4:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	83 e1       	ldi	r24, 0x13	; 19
    1bac:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalWrite>
    1bb0:	e9 eb       	ldi	r30, 0xB9	; 185
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8e 7f       	andi	r24, 0xFE	; 254
    1bb8:	80 83       	st	Z, r24
    1bba:	80 81       	ld	r24, Z
    1bbc:	8d 7f       	andi	r24, 0xFD	; 253
    1bbe:	80 83       	st	Z, r24
    1bc0:	88 e4       	ldi	r24, 0x48	; 72
    1bc2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1bc6:	85 e4       	ldi	r24, 0x45	; 69
    1bc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1bcc:	08 95       	ret

00001bce <twi_writeTo>:
    1bce:	0f 93       	push	r16
    1bd0:	41 32       	cpi	r20, 0x21	; 33
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <twi_writeTo+0x8>
    1bd4:	4a c0       	rjmp	.+148    	; 0x1c6a <twi_writeTo+0x9c>
    1bd6:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <twi_state>
    1bda:	91 11       	cpse	r25, r1
    1bdc:	fc cf       	rjmp	.-8      	; 0x1bd6 <twi_writeTo+0x8>
    1bde:	32 e0       	ldi	r19, 0x02	; 2
    1be0:	30 93 70 03 	sts	0x0370, r19	; 0x800370 <twi_state>
    1be4:	00 93 6e 03 	sts	0x036E, r16	; 0x80036e <twi_sendStop>
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <twi_error>
    1bee:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <twi_masterBufferIndex>
    1bf2:	40 93 47 03 	sts	0x0347, r20	; 0x800347 <twi_masterBufferLength>
    1bf6:	56 2f       	mov	r21, r22
    1bf8:	a9 e4       	ldi	r26, 0x49	; 73
    1bfa:	b3 e0       	ldi	r27, 0x03	; 3
    1bfc:	fb 01       	movw	r30, r22
    1bfe:	3e 2f       	mov	r19, r30
    1c00:	35 1b       	sub	r19, r21
    1c02:	34 17       	cp	r19, r20
    1c04:	18 f4       	brcc	.+6      	; 0x1c0c <twi_writeTo+0x3e>
    1c06:	31 91       	ld	r19, Z+
    1c08:	3d 93       	st	X+, r19
    1c0a:	f9 cf       	rjmp	.-14     	; 0x1bfe <twi_writeTo+0x30>
    1c0c:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <twi_slarw>
    1c10:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <twi_slarw>
    1c14:	88 0f       	add	r24, r24
    1c16:	83 2b       	or	r24, r19
    1c18:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_slarw>
    1c1c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_inRepStart>
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	61 f4       	brne	.+24     	; 0x1c3c <twi_writeTo+0x6e>
    1c24:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <twi_inRepStart>
    1c28:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_slarw>
    1c2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c34:	83 fd       	sbrc	r24, 3
    1c36:	f8 cf       	rjmp	.-16     	; 0x1c28 <twi_writeTo+0x5a>
    1c38:	85 ec       	ldi	r24, 0xC5	; 197
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <twi_writeTo+0x70>
    1c3c:	85 ee       	ldi	r24, 0xE5	; 229
    1c3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c42:	22 23       	and	r18, r18
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <twi_writeTo+0x80>
    1c46:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <twi_state>
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	d1 f3       	breq	.-12     	; 0x1c42 <twi_writeTo+0x74>
    1c4e:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_error>
    1c52:	8f 3f       	cpi	r24, 0xFF	; 255
    1c54:	79 f0       	breq	.+30     	; 0x1c74 <twi_writeTo+0xa6>
    1c56:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_error>
    1c5a:	80 32       	cpi	r24, 0x20	; 32
    1c5c:	41 f0       	breq	.+16     	; 0x1c6e <twi_writeTo+0xa0>
    1c5e:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_error>
    1c62:	80 33       	cpi	r24, 0x30	; 48
    1c64:	31 f0       	breq	.+12     	; 0x1c72 <twi_writeTo+0xa4>
    1c66:	94 e0       	ldi	r25, 0x04	; 4
    1c68:	05 c0       	rjmp	.+10     	; 0x1c74 <twi_writeTo+0xa6>
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	03 c0       	rjmp	.+6      	; 0x1c74 <twi_writeTo+0xa6>
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <twi_writeTo+0xa6>
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	89 2f       	mov	r24, r25
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <twi_transmit>:
    1c7a:	40 91 25 03 	lds	r20, 0x0325	; 0x800325 <twi_txBufferLength>
    1c7e:	26 2f       	mov	r18, r22
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	24 0f       	add	r18, r20
    1c84:	31 1d       	adc	r19, r1
    1c86:	21 32       	cpi	r18, 0x21	; 33
    1c88:	31 05       	cpc	r19, r1
    1c8a:	dc f4       	brge	.+54     	; 0x1cc2 <twi_transmit+0x48>
    1c8c:	20 91 70 03 	lds	r18, 0x0370	; 0x800370 <twi_state>
    1c90:	24 30       	cpi	r18, 0x04	; 4
    1c92:	c9 f4       	brne	.+50     	; 0x1cc6 <twi_transmit+0x4c>
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	86 17       	cp	r24, r22
    1c9c:	58 f4       	brcc	.+22     	; 0x1cb4 <twi_transmit+0x3a>
    1c9e:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <twi_txBufferLength>
    1ca2:	21 91       	ld	r18, Z+
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	a9 5d       	subi	r26, 0xD9	; 217
    1ca8:	bc 4f       	sbci	r27, 0xFC	; 252
    1caa:	a3 0f       	add	r26, r19
    1cac:	b1 1d       	adc	r27, r1
    1cae:	2c 93       	st	X, r18
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	f3 cf       	rjmp	.-26     	; 0x1c9a <twi_transmit+0x20>
    1cb4:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <twi_txBufferLength>
    1cb8:	68 0f       	add	r22, r24
    1cba:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <twi_txBufferLength>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	08 95       	ret
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	08 95       	ret
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	08 95       	ret

00001cca <twi_attachSlaveRxEvent>:
    1cca:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <twi_onSlaveReceive+0x1>
    1cce:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_onSlaveReceive>
    1cd2:	08 95       	ret

00001cd4 <twi_attachSlaveTxEvent>:
    1cd4:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <twi_onSlaveTransmit+0x1>
    1cd8:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <twi_onSlaveTransmit>
    1cdc:	08 95       	ret

00001cde <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1cde:	85 ed       	ldi	r24, 0xD5	; 213
    1ce0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1ce4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ce8:	84 fd       	sbrc	r24, 4
    1cea:	fc cf       	rjmp	.-8      	; 0x1ce4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1cec:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
    1cf0:	08 95       	ret

00001cf2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1cf2:	85 ec       	ldi	r24, 0xC5	; 197
    1cf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1cf8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
    1cfc:	08 95       	ret

00001cfe <__vector_24>:
}

ISR(TWI_vect)
{
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
  switch(TW_STATUS){
    1d20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1d24:	88 7f       	andi	r24, 0xF8	; 248
    1d26:	80 36       	cpi	r24, 0x60	; 96
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <__vector_24+0x2e>
    1d2a:	9e c0       	rjmp	.+316    	; 0x1e68 <__vector_24+0x16a>
    1d2c:	78 f5       	brcc	.+94     	; 0x1d8c <__vector_24+0x8e>
    1d2e:	88 32       	cpi	r24, 0x28	; 40
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <__vector_24+0x36>
    1d32:	5d c0       	rjmp	.+186    	; 0x1dee <__vector_24+0xf0>
    1d34:	90 f4       	brcc	.+36     	; 0x1d5a <__vector_24+0x5c>
    1d36:	80 31       	cpi	r24, 0x10	; 16
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <__vector_24+0x3e>
    1d3a:	56 c0       	rjmp	.+172    	; 0x1de8 <__vector_24+0xea>
    1d3c:	38 f4       	brcc	.+14     	; 0x1d4c <__vector_24+0x4e>
    1d3e:	88 23       	and	r24, r24
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <__vector_24+0x46>
    1d42:	f5 c0       	rjmp	.+490    	; 0x1f2e <__vector_24+0x230>
    1d44:	88 30       	cpi	r24, 0x08	; 8
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <__vector_24+0x4c>
    1d48:	4f c0       	rjmp	.+158    	; 0x1de8 <__vector_24+0xea>
    1d4a:	f5 c0       	rjmp	.+490    	; 0x1f36 <__vector_24+0x238>
    1d4c:	88 31       	cpi	r24, 0x18	; 24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <__vector_24+0x54>
    1d50:	4e c0       	rjmp	.+156    	; 0x1dee <__vector_24+0xf0>
    1d52:	80 32       	cpi	r24, 0x20	; 32
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <__vector_24+0x5a>
    1d56:	5f c0       	rjmp	.+190    	; 0x1e16 <__vector_24+0x118>
    1d58:	ee c0       	rjmp	.+476    	; 0x1f36 <__vector_24+0x238>
    1d5a:	80 34       	cpi	r24, 0x40	; 64
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <__vector_24+0x62>
    1d5e:	6a c0       	rjmp	.+212    	; 0x1e34 <__vector_24+0x136>
    1d60:	58 f4       	brcc	.+22     	; 0x1d78 <__vector_24+0x7a>
    1d62:	80 33       	cpi	r24, 0x30	; 48
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <__vector_24+0x6a>
    1d66:	57 c0       	rjmp	.+174    	; 0x1e16 <__vector_24+0x118>
    1d68:	88 33       	cpi	r24, 0x38	; 56
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <__vector_24+0x70>
    1d6c:	e4 c0       	rjmp	.+456    	; 0x1f36 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1d6e:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <twi_error>
      twi_releaseBus();
    1d72:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <twi_releaseBus>
      break;
    1d76:	df c0       	rjmp	.+446    	; 0x1f36 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d78:	80 35       	cpi	r24, 0x50	; 80
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <__vector_24+0x80>
    1d7c:	4f c0       	rjmp	.+158    	; 0x1e1c <__vector_24+0x11e>
    1d7e:	88 35       	cpi	r24, 0x58	; 88
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <__vector_24+0x86>
    1d82:	5d c0       	rjmp	.+186    	; 0x1e3e <__vector_24+0x140>
    1d84:	88 34       	cpi	r24, 0x48	; 72
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <__vector_24+0x8c>
    1d88:	d6 c0       	rjmp	.+428    	; 0x1f36 <__vector_24+0x238>
    1d8a:	d3 c0       	rjmp	.+422    	; 0x1f32 <__vector_24+0x234>
    1d8c:	88 39       	cpi	r24, 0x98	; 152
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <__vector_24+0x94>
    1d90:	c4 c0       	rjmp	.+392    	; 0x1f1a <__vector_24+0x21c>
    1d92:	a8 f4       	brcc	.+42     	; 0x1dbe <__vector_24+0xc0>
    1d94:	88 37       	cpi	r24, 0x78	; 120
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__vector_24+0x9c>
    1d98:	67 c0       	rjmp	.+206    	; 0x1e68 <__vector_24+0x16a>
    1d9a:	38 f4       	brcc	.+14     	; 0x1daa <__vector_24+0xac>
    1d9c:	88 36       	cpi	r24, 0x68	; 104
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <__vector_24+0xa4>
    1da0:	63 c0       	rjmp	.+198    	; 0x1e68 <__vector_24+0x16a>
    1da2:	80 37       	cpi	r24, 0x70	; 112
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <__vector_24+0xaa>
    1da6:	60 c0       	rjmp	.+192    	; 0x1e68 <__vector_24+0x16a>
    1da8:	c6 c0       	rjmp	.+396    	; 0x1f36 <__vector_24+0x238>
    1daa:	88 38       	cpi	r24, 0x88	; 136
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <__vector_24+0xb2>
    1dae:	b5 c0       	rjmp	.+362    	; 0x1f1a <__vector_24+0x21c>
    1db0:	80 39       	cpi	r24, 0x90	; 144
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__vector_24+0xb8>
    1db4:	5f c0       	rjmp	.+190    	; 0x1e74 <__vector_24+0x176>
    1db6:	80 38       	cpi	r24, 0x80	; 128
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <__vector_24+0xbe>
    1dba:	bd c0       	rjmp	.+378    	; 0x1f36 <__vector_24+0x238>
    1dbc:	5b c0       	rjmp	.+182    	; 0x1e74 <__vector_24+0x176>
    1dbe:	80 3b       	cpi	r24, 0xB0	; 176
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__vector_24+0xc6>
    1dc2:	83 c0       	rjmp	.+262    	; 0x1eca <__vector_24+0x1cc>
    1dc4:	38 f4       	brcc	.+14     	; 0x1dd4 <__vector_24+0xd6>
    1dc6:	80 3a       	cpi	r24, 0xA0	; 160
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <__vector_24+0xce>
    1dca:	66 c0       	rjmp	.+204    	; 0x1e98 <__vector_24+0x19a>
    1dcc:	88 3a       	cpi	r24, 0xA8	; 168
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <__vector_24+0xd4>
    1dd0:	7c c0       	rjmp	.+248    	; 0x1eca <__vector_24+0x1cc>
    1dd2:	b1 c0       	rjmp	.+354    	; 0x1f36 <__vector_24+0x238>
    1dd4:	80 3c       	cpi	r24, 0xC0	; 192
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <__vector_24+0xdc>
    1dd8:	a4 c0       	rjmp	.+328    	; 0x1f22 <__vector_24+0x224>
    1dda:	88 3c       	cpi	r24, 0xC8	; 200
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <__vector_24+0xe2>
    1dde:	a1 c0       	rjmp	.+322    	; 0x1f22 <__vector_24+0x224>
    1de0:	88 3b       	cpi	r24, 0xB8	; 184
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <__vector_24+0xe8>
    1de4:	87 c0       	rjmp	.+270    	; 0x1ef4 <__vector_24+0x1f6>
    1de6:	a7 c0       	rjmp	.+334    	; 0x1f36 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1de8:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_slarw>
    1dec:	10 c0       	rjmp	.+32     	; 0x1e0e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1dee:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <twi_masterBufferIndex>
    1df2:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <twi_masterBufferLength>
    1df6:	98 17       	cp	r25, r24
    1df8:	70 f5       	brcc	.+92     	; 0x1e56 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1dfa:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <twi_masterBufferIndex>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8e 0f       	add	r24, r30
    1e02:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <twi_masterBufferIndex>
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	e7 5b       	subi	r30, 0xB7	; 183
    1e0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e12:	85 ec       	ldi	r24, 0xC5	; 197
    1e14:	83 c0       	rjmp	.+262    	; 0x1f1c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e16:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <twi_error>
    1e1a:	8b c0       	rjmp	.+278    	; 0x1f32 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e1c:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <twi_masterBufferIndex>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	8e 0f       	add	r24, r30
    1e24:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <twi_masterBufferIndex>
    1e28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	e7 5b       	subi	r30, 0xB7	; 183
    1e30:	fc 4f       	sbci	r31, 0xFC	; 252
    1e32:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e34:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <twi_masterBufferIndex>
    1e38:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <twi_masterBufferLength>
    1e3c:	6b c0       	rjmp	.+214    	; 0x1f14 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e3e:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <twi_masterBufferIndex>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	8e 0f       	add	r24, r30
    1e46:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <twi_masterBufferIndex>
    1e4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	e7 5b       	subi	r30, 0xB7	; 183
    1e52:	fc 4f       	sbci	r31, 0xFC	; 252
    1e54:	80 83       	st	Z, r24
	if (twi_sendStop)
    1e56:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <twi_sendStop>
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	6a c0       	rjmp	.+212    	; 0x1f32 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1e64:	84 ea       	ldi	r24, 0xA4	; 164
    1e66:	5e c0       	rjmp	.+188    	; 0x1f24 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e68:	83 e0       	ldi	r24, 0x03	; 3
    1e6a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e6e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_rxBufferIndex>
    1e72:	cf cf       	rjmp	.-98     	; 0x1e12 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e74:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <twi_rxBufferIndex>
    1e78:	80 32       	cpi	r24, 0x20	; 32
    1e7a:	08 f0       	brcs	.+2      	; 0x1e7e <__vector_24+0x180>
    1e7c:	4e c0       	rjmp	.+156    	; 0x1f1a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1e7e:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_rxBufferIndex>
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	8e 0f       	add	r24, r30
    1e86:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_rxBufferIndex>
    1e8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	eb 5f       	subi	r30, 0xFB	; 251
    1e92:	fc 4f       	sbci	r31, 0xFC	; 252
    1e94:	80 83       	st	Z, r24
    1e96:	bd cf       	rjmp	.-134    	; 0x1e12 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1e98:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e9c:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <twi_rxBufferIndex>
    1ea0:	80 32       	cpi	r24, 0x20	; 32
    1ea2:	30 f4       	brcc	.+12     	; 0x1eb0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1ea4:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_rxBufferIndex>
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	eb 5f       	subi	r30, 0xFB	; 251
    1eac:	fc 4f       	sbci	r31, 0xFC	; 252
    1eae:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1eb0:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <twi_rxBufferIndex>
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <twi_onSlaveReceive>
    1eba:	f0 91 6a 03 	lds	r31, 0x036A	; 0x80036a <twi_onSlaveReceive+0x1>
    1ebe:	85 e0       	ldi	r24, 0x05	; 5
    1ec0:	93 e0       	ldi	r25, 0x03	; 3
    1ec2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1ec4:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_rxBufferIndex>
      break;
    1ec8:	36 c0       	rjmp	.+108    	; 0x1f36 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1eca:	84 e0       	ldi	r24, 0x04	; 4
    1ecc:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ed0:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ed4:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ed8:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <twi_onSlaveTransmit>
    1edc:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <twi_onSlaveTransmit+0x1>
    1ee0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1ee2:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <twi_txBufferLength>
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1ef0:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ef4:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <twi_txBufferIndex>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	8e 0f       	add	r24, r30
    1efc:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <twi_txBufferIndex>
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	e9 5d       	subi	r30, 0xD9	; 217
    1f04:	fc 4f       	sbci	r31, 0xFC	; 252
    1f06:	80 81       	ld	r24, Z
    1f08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f0c:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <twi_txBufferIndex>
    1f10:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <twi_txBufferLength>
    1f14:	98 17       	cp	r25, r24
    1f16:	08 f4       	brcc	.+2      	; 0x1f1a <__vector_24+0x21c>
    1f18:	7c cf       	rjmp	.-264    	; 0x1e12 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f1a:	85 e8       	ldi	r24, 0x85	; 133
    1f1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f20:	0a c0       	rjmp	.+20     	; 0x1f36 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f22:	85 ec       	ldi	r24, 0xC5	; 197
    1f24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1f28:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
      break;
    1f2c:	04 c0       	rjmp	.+8      	; 0x1f36 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1f2e:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <twi_error>
      twi_stop();
    1f32:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <twi_stop>
      break;
  }
}
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <__floatunsisf>:
    1f58:	e8 94       	clt
    1f5a:	09 c0       	rjmp	.+18     	; 0x1f6e <__floatsisf+0x12>

00001f5c <__floatsisf>:
    1f5c:	97 fb       	bst	r25, 7
    1f5e:	3e f4       	brtc	.+14     	; 0x1f6e <__floatsisf+0x12>
    1f60:	90 95       	com	r25
    1f62:	80 95       	com	r24
    1f64:	70 95       	com	r23
    1f66:	61 95       	neg	r22
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6e:	99 23       	and	r25, r25
    1f70:	a9 f0       	breq	.+42     	; 0x1f9c <__floatsisf+0x40>
    1f72:	f9 2f       	mov	r31, r25
    1f74:	96 e9       	ldi	r25, 0x96	; 150
    1f76:	bb 27       	eor	r27, r27
    1f78:	93 95       	inc	r25
    1f7a:	f6 95       	lsr	r31
    1f7c:	87 95       	ror	r24
    1f7e:	77 95       	ror	r23
    1f80:	67 95       	ror	r22
    1f82:	b7 95       	ror	r27
    1f84:	f1 11       	cpse	r31, r1
    1f86:	f8 cf       	rjmp	.-16     	; 0x1f78 <__floatsisf+0x1c>
    1f88:	fa f4       	brpl	.+62     	; 0x1fc8 <__floatsisf+0x6c>
    1f8a:	bb 0f       	add	r27, r27
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <__floatsisf+0x36>
    1f8e:	60 ff       	sbrs	r22, 0
    1f90:	1b c0       	rjmp	.+54     	; 0x1fc8 <__floatsisf+0x6c>
    1f92:	6f 5f       	subi	r22, 0xFF	; 255
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	8f 4f       	sbci	r24, 0xFF	; 255
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	16 c0       	rjmp	.+44     	; 0x1fc8 <__floatsisf+0x6c>
    1f9c:	88 23       	and	r24, r24
    1f9e:	11 f0       	breq	.+4      	; 0x1fa4 <__floatsisf+0x48>
    1fa0:	96 e9       	ldi	r25, 0x96	; 150
    1fa2:	11 c0       	rjmp	.+34     	; 0x1fc6 <__floatsisf+0x6a>
    1fa4:	77 23       	and	r23, r23
    1fa6:	21 f0       	breq	.+8      	; 0x1fb0 <__floatsisf+0x54>
    1fa8:	9e e8       	ldi	r25, 0x8E	; 142
    1faa:	87 2f       	mov	r24, r23
    1fac:	76 2f       	mov	r23, r22
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <__floatsisf+0x5e>
    1fb0:	66 23       	and	r22, r22
    1fb2:	71 f0       	breq	.+28     	; 0x1fd0 <__floatsisf+0x74>
    1fb4:	96 e8       	ldi	r25, 0x86	; 134
    1fb6:	86 2f       	mov	r24, r22
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	2a f0       	brmi	.+10     	; 0x1fc8 <__floatsisf+0x6c>
    1fbe:	9a 95       	dec	r25
    1fc0:	66 0f       	add	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	da f7       	brpl	.-10     	; 0x1fbe <__floatsisf+0x62>
    1fc8:	88 0f       	add	r24, r24
    1fca:	96 95       	lsr	r25
    1fcc:	87 95       	ror	r24
    1fce:	97 f9       	bld	r25, 7
    1fd0:	08 95       	ret

00001fd2 <__mulsf3>:
    1fd2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__mulsf3x>
    1fd6:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_round>
    1fda:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_pscA>
    1fde:	38 f0       	brcs	.+14     	; 0x1fee <__mulsf3+0x1c>
    1fe0:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscB>
    1fe4:	20 f0       	brcs	.+8      	; 0x1fee <__mulsf3+0x1c>
    1fe6:	95 23       	and	r25, r21
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <__mulsf3+0x1c>
    1fea:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_inf>
    1fee:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_nan>
    1ff2:	11 24       	eor	r1, r1
    1ff4:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_szero>

00001ff8 <__mulsf3x>:
    1ff8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_split3>
    1ffc:	70 f3       	brcs	.-36     	; 0x1fda <__mulsf3+0x8>

00001ffe <__mulsf3_pse>:
    1ffe:	95 9f       	mul	r25, r21
    2000:	c1 f3       	breq	.-16     	; 0x1ff2 <__mulsf3+0x20>
    2002:	95 0f       	add	r25, r21
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	55 1f       	adc	r21, r21
    2008:	62 9f       	mul	r22, r18
    200a:	f0 01       	movw	r30, r0
    200c:	72 9f       	mul	r23, r18
    200e:	bb 27       	eor	r27, r27
    2010:	f0 0d       	add	r31, r0
    2012:	b1 1d       	adc	r27, r1
    2014:	63 9f       	mul	r22, r19
    2016:	aa 27       	eor	r26, r26
    2018:	f0 0d       	add	r31, r0
    201a:	b1 1d       	adc	r27, r1
    201c:	aa 1f       	adc	r26, r26
    201e:	64 9f       	mul	r22, r20
    2020:	66 27       	eor	r22, r22
    2022:	b0 0d       	add	r27, r0
    2024:	a1 1d       	adc	r26, r1
    2026:	66 1f       	adc	r22, r22
    2028:	82 9f       	mul	r24, r18
    202a:	22 27       	eor	r18, r18
    202c:	b0 0d       	add	r27, r0
    202e:	a1 1d       	adc	r26, r1
    2030:	62 1f       	adc	r22, r18
    2032:	73 9f       	mul	r23, r19
    2034:	b0 0d       	add	r27, r0
    2036:	a1 1d       	adc	r26, r1
    2038:	62 1f       	adc	r22, r18
    203a:	83 9f       	mul	r24, r19
    203c:	a0 0d       	add	r26, r0
    203e:	61 1d       	adc	r22, r1
    2040:	22 1f       	adc	r18, r18
    2042:	74 9f       	mul	r23, r20
    2044:	33 27       	eor	r19, r19
    2046:	a0 0d       	add	r26, r0
    2048:	61 1d       	adc	r22, r1
    204a:	23 1f       	adc	r18, r19
    204c:	84 9f       	mul	r24, r20
    204e:	60 0d       	add	r22, r0
    2050:	21 1d       	adc	r18, r1
    2052:	82 2f       	mov	r24, r18
    2054:	76 2f       	mov	r23, r22
    2056:	6a 2f       	mov	r22, r26
    2058:	11 24       	eor	r1, r1
    205a:	9f 57       	subi	r25, 0x7F	; 127
    205c:	50 40       	sbci	r21, 0x00	; 0
    205e:	9a f0       	brmi	.+38     	; 0x2086 <__mulsf3_pse+0x88>
    2060:	f1 f0       	breq	.+60     	; 0x209e <__mulsf3_pse+0xa0>
    2062:	88 23       	and	r24, r24
    2064:	4a f0       	brmi	.+18     	; 0x2078 <__mulsf3_pse+0x7a>
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	bb 1f       	adc	r27, r27
    206c:	66 1f       	adc	r22, r22
    206e:	77 1f       	adc	r23, r23
    2070:	88 1f       	adc	r24, r24
    2072:	91 50       	subi	r25, 0x01	; 1
    2074:	50 40       	sbci	r21, 0x00	; 0
    2076:	a9 f7       	brne	.-22     	; 0x2062 <__mulsf3_pse+0x64>
    2078:	9e 3f       	cpi	r25, 0xFE	; 254
    207a:	51 05       	cpc	r21, r1
    207c:	80 f0       	brcs	.+32     	; 0x209e <__mulsf3_pse+0xa0>
    207e:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_inf>
    2082:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_szero>
    2086:	5f 3f       	cpi	r21, 0xFF	; 255
    2088:	e4 f3       	brlt	.-8      	; 0x2082 <__mulsf3_pse+0x84>
    208a:	98 3e       	cpi	r25, 0xE8	; 232
    208c:	d4 f3       	brlt	.-12     	; 0x2082 <__mulsf3_pse+0x84>
    208e:	86 95       	lsr	r24
    2090:	77 95       	ror	r23
    2092:	67 95       	ror	r22
    2094:	b7 95       	ror	r27
    2096:	f7 95       	ror	r31
    2098:	e7 95       	ror	r30
    209a:	9f 5f       	subi	r25, 0xFF	; 255
    209c:	c1 f7       	brne	.-16     	; 0x208e <__mulsf3_pse+0x90>
    209e:	fe 2b       	or	r31, r30
    20a0:	88 0f       	add	r24, r24
    20a2:	91 1d       	adc	r25, r1
    20a4:	96 95       	lsr	r25
    20a6:	87 95       	ror	r24
    20a8:	97 f9       	bld	r25, 7
    20aa:	08 95       	ret

000020ac <__udivmodsi4>:
    20ac:	a1 e2       	ldi	r26, 0x21	; 33
    20ae:	1a 2e       	mov	r1, r26
    20b0:	aa 1b       	sub	r26, r26
    20b2:	bb 1b       	sub	r27, r27
    20b4:	fd 01       	movw	r30, r26
    20b6:	0d c0       	rjmp	.+26     	; 0x20d2 <__udivmodsi4_ep>

000020b8 <__udivmodsi4_loop>:
    20b8:	aa 1f       	adc	r26, r26
    20ba:	bb 1f       	adc	r27, r27
    20bc:	ee 1f       	adc	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	a2 17       	cp	r26, r18
    20c2:	b3 07       	cpc	r27, r19
    20c4:	e4 07       	cpc	r30, r20
    20c6:	f5 07       	cpc	r31, r21
    20c8:	20 f0       	brcs	.+8      	; 0x20d2 <__udivmodsi4_ep>
    20ca:	a2 1b       	sub	r26, r18
    20cc:	b3 0b       	sbc	r27, r19
    20ce:	e4 0b       	sbc	r30, r20
    20d0:	f5 0b       	sbc	r31, r21

000020d2 <__udivmodsi4_ep>:
    20d2:	66 1f       	adc	r22, r22
    20d4:	77 1f       	adc	r23, r23
    20d6:	88 1f       	adc	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	1a 94       	dec	r1
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <__udivmodsi4_loop>
    20de:	60 95       	com	r22
    20e0:	70 95       	com	r23
    20e2:	80 95       	com	r24
    20e4:	90 95       	com	r25
    20e6:	9b 01       	movw	r18, r22
    20e8:	ac 01       	movw	r20, r24
    20ea:	bd 01       	movw	r22, r26
    20ec:	cf 01       	movw	r24, r30
    20ee:	08 95       	ret

000020f0 <__tablejump2__>:
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	05 90       	lpm	r0, Z+
    20f6:	f4 91       	lpm	r31, Z
    20f8:	e0 2d       	mov	r30, r0
    20fa:	09 94       	ijmp

000020fc <dtostrf>:
    20fc:	ef 92       	push	r14
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	e8 01       	movw	r28, r16
    2108:	47 fd       	sbrc	r20, 7
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <dtostrf+0x14>
    210c:	34 e0       	ldi	r19, 0x04	; 4
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <dtostrf+0x16>
    2110:	34 e1       	ldi	r19, 0x14	; 20
    2112:	04 2e       	mov	r0, r20
    2114:	00 0c       	add	r0, r0
    2116:	55 0b       	sbc	r21, r21
    2118:	57 ff       	sbrs	r21, 7
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <dtostrf+0x26>
    211c:	51 95       	neg	r21
    211e:	41 95       	neg	r20
    2120:	51 09       	sbc	r21, r1
    2122:	e3 2e       	mov	r14, r19
    2124:	02 2f       	mov	r16, r18
    2126:	24 2f       	mov	r18, r20
    2128:	ae 01       	movw	r20, r28
    212a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <dtoa_prf>
    212e:	ce 01       	movw	r24, r28
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ef 90       	pop	r14
    213a:	08 95       	ret

0000213c <malloc>:
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	91 05       	cpc	r25, r1
    2148:	10 f4       	brcc	.+4      	; 0x214e <malloc+0x12>
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <__flp>
    2152:	f0 91 74 03 	lds	r31, 0x0374	; 0x800374 <__flp+0x1>
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	a0 e0       	ldi	r26, 0x00	; 0
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	30 97       	sbiw	r30, 0x00	; 0
    2160:	19 f1       	breq	.+70     	; 0x21a8 <malloc+0x6c>
    2162:	40 81       	ld	r20, Z
    2164:	51 81       	ldd	r21, Z+1	; 0x01
    2166:	02 81       	ldd	r16, Z+2	; 0x02
    2168:	13 81       	ldd	r17, Z+3	; 0x03
    216a:	48 17       	cp	r20, r24
    216c:	59 07       	cpc	r21, r25
    216e:	c8 f0       	brcs	.+50     	; 0x21a2 <malloc+0x66>
    2170:	84 17       	cp	r24, r20
    2172:	95 07       	cpc	r25, r21
    2174:	69 f4       	brne	.+26     	; 0x2190 <malloc+0x54>
    2176:	10 97       	sbiw	r26, 0x00	; 0
    2178:	31 f0       	breq	.+12     	; 0x2186 <malloc+0x4a>
    217a:	12 96       	adiw	r26, 0x02	; 2
    217c:	0c 93       	st	X, r16
    217e:	12 97       	sbiw	r26, 0x02	; 2
    2180:	13 96       	adiw	r26, 0x03	; 3
    2182:	1c 93       	st	X, r17
    2184:	27 c0       	rjmp	.+78     	; 0x21d4 <malloc+0x98>
    2186:	00 93 73 03 	sts	0x0373, r16	; 0x800373 <__flp>
    218a:	10 93 74 03 	sts	0x0374, r17	; 0x800374 <__flp+0x1>
    218e:	22 c0       	rjmp	.+68     	; 0x21d4 <malloc+0x98>
    2190:	21 15       	cp	r18, r1
    2192:	31 05       	cpc	r19, r1
    2194:	19 f0       	breq	.+6      	; 0x219c <malloc+0x60>
    2196:	42 17       	cp	r20, r18
    2198:	53 07       	cpc	r21, r19
    219a:	18 f4       	brcc	.+6      	; 0x21a2 <malloc+0x66>
    219c:	9a 01       	movw	r18, r20
    219e:	bd 01       	movw	r22, r26
    21a0:	ef 01       	movw	r28, r30
    21a2:	df 01       	movw	r26, r30
    21a4:	f8 01       	movw	r30, r16
    21a6:	db cf       	rjmp	.-74     	; 0x215e <malloc+0x22>
    21a8:	21 15       	cp	r18, r1
    21aa:	31 05       	cpc	r19, r1
    21ac:	f9 f0       	breq	.+62     	; 0x21ec <malloc+0xb0>
    21ae:	28 1b       	sub	r18, r24
    21b0:	39 0b       	sbc	r19, r25
    21b2:	24 30       	cpi	r18, 0x04	; 4
    21b4:	31 05       	cpc	r19, r1
    21b6:	80 f4       	brcc	.+32     	; 0x21d8 <malloc+0x9c>
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	61 15       	cp	r22, r1
    21be:	71 05       	cpc	r23, r1
    21c0:	21 f0       	breq	.+8      	; 0x21ca <malloc+0x8e>
    21c2:	fb 01       	movw	r30, r22
    21c4:	93 83       	std	Z+3, r25	; 0x03
    21c6:	82 83       	std	Z+2, r24	; 0x02
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <malloc+0x96>
    21ca:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <__flp+0x1>
    21ce:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <__flp>
    21d2:	fe 01       	movw	r30, r28
    21d4:	32 96       	adiw	r30, 0x02	; 2
    21d6:	44 c0       	rjmp	.+136    	; 0x2260 <malloc+0x124>
    21d8:	fe 01       	movw	r30, r28
    21da:	e2 0f       	add	r30, r18
    21dc:	f3 1f       	adc	r31, r19
    21de:	81 93       	st	Z+, r24
    21e0:	91 93       	st	Z+, r25
    21e2:	22 50       	subi	r18, 0x02	; 2
    21e4:	31 09       	sbc	r19, r1
    21e6:	39 83       	std	Y+1, r19	; 0x01
    21e8:	28 83       	st	Y, r18
    21ea:	3a c0       	rjmp	.+116    	; 0x2260 <malloc+0x124>
    21ec:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <__brkval>
    21f0:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <__brkval+0x1>
    21f4:	23 2b       	or	r18, r19
    21f6:	41 f4       	brne	.+16     	; 0x2208 <malloc+0xcc>
    21f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    21fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2200:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <__brkval+0x1>
    2204:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <__brkval>
    2208:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    220c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2210:	21 15       	cp	r18, r1
    2212:	31 05       	cpc	r19, r1
    2214:	41 f4       	brne	.+16     	; 0x2226 <malloc+0xea>
    2216:	2d b7       	in	r18, 0x3d	; 61
    2218:	3e b7       	in	r19, 0x3e	; 62
    221a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    221e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2222:	24 1b       	sub	r18, r20
    2224:	35 0b       	sbc	r19, r21
    2226:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <__brkval>
    222a:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <__brkval+0x1>
    222e:	e2 17       	cp	r30, r18
    2230:	f3 07       	cpc	r31, r19
    2232:	a0 f4       	brcc	.+40     	; 0x225c <malloc+0x120>
    2234:	2e 1b       	sub	r18, r30
    2236:	3f 0b       	sbc	r19, r31
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	78 f0       	brcs	.+30     	; 0x225c <malloc+0x120>
    223e:	ac 01       	movw	r20, r24
    2240:	4e 5f       	subi	r20, 0xFE	; 254
    2242:	5f 4f       	sbci	r21, 0xFF	; 255
    2244:	24 17       	cp	r18, r20
    2246:	35 07       	cpc	r19, r21
    2248:	48 f0       	brcs	.+18     	; 0x225c <malloc+0x120>
    224a:	4e 0f       	add	r20, r30
    224c:	5f 1f       	adc	r21, r31
    224e:	50 93 72 03 	sts	0x0372, r21	; 0x800372 <__brkval+0x1>
    2252:	40 93 71 03 	sts	0x0371, r20	; 0x800371 <__brkval>
    2256:	81 93       	st	Z+, r24
    2258:	91 93       	st	Z+, r25
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <malloc+0x124>
    225c:	e0 e0       	ldi	r30, 0x00	; 0
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	cf 01       	movw	r24, r30
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	08 95       	ret

0000226c <free>:
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	09 f4       	brne	.+2      	; 0x2276 <free+0xa>
    2274:	81 c0       	rjmp	.+258    	; 0x2378 <free+0x10c>
    2276:	fc 01       	movw	r30, r24
    2278:	32 97       	sbiw	r30, 0x02	; 2
    227a:	13 82       	std	Z+3, r1	; 0x03
    227c:	12 82       	std	Z+2, r1	; 0x02
    227e:	a0 91 73 03 	lds	r26, 0x0373	; 0x800373 <__flp>
    2282:	b0 91 74 03 	lds	r27, 0x0374	; 0x800374 <__flp+0x1>
    2286:	10 97       	sbiw	r26, 0x00	; 0
    2288:	81 f4       	brne	.+32     	; 0x22aa <free+0x3e>
    228a:	20 81       	ld	r18, Z
    228c:	31 81       	ldd	r19, Z+1	; 0x01
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <__brkval>
    2296:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <__brkval+0x1>
    229a:	28 17       	cp	r18, r24
    229c:	39 07       	cpc	r19, r25
    229e:	51 f5       	brne	.+84     	; 0x22f4 <free+0x88>
    22a0:	f0 93 72 03 	sts	0x0372, r31	; 0x800372 <__brkval+0x1>
    22a4:	e0 93 71 03 	sts	0x0371, r30	; 0x800371 <__brkval>
    22a8:	67 c0       	rjmp	.+206    	; 0x2378 <free+0x10c>
    22aa:	ed 01       	movw	r28, r26
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	ce 17       	cp	r28, r30
    22b2:	df 07       	cpc	r29, r31
    22b4:	40 f4       	brcc	.+16     	; 0x22c6 <free+0x5a>
    22b6:	4a 81       	ldd	r20, Y+2	; 0x02
    22b8:	5b 81       	ldd	r21, Y+3	; 0x03
    22ba:	9e 01       	movw	r18, r28
    22bc:	41 15       	cp	r20, r1
    22be:	51 05       	cpc	r21, r1
    22c0:	f1 f0       	breq	.+60     	; 0x22fe <free+0x92>
    22c2:	ea 01       	movw	r28, r20
    22c4:	f5 cf       	rjmp	.-22     	; 0x22b0 <free+0x44>
    22c6:	d3 83       	std	Z+3, r29	; 0x03
    22c8:	c2 83       	std	Z+2, r28	; 0x02
    22ca:	40 81       	ld	r20, Z
    22cc:	51 81       	ldd	r21, Z+1	; 0x01
    22ce:	84 0f       	add	r24, r20
    22d0:	95 1f       	adc	r25, r21
    22d2:	c8 17       	cp	r28, r24
    22d4:	d9 07       	cpc	r29, r25
    22d6:	59 f4       	brne	.+22     	; 0x22ee <free+0x82>
    22d8:	88 81       	ld	r24, Y
    22da:	99 81       	ldd	r25, Y+1	; 0x01
    22dc:	84 0f       	add	r24, r20
    22de:	95 1f       	adc	r25, r21
    22e0:	02 96       	adiw	r24, 0x02	; 2
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ea:	93 83       	std	Z+3, r25	; 0x03
    22ec:	82 83       	std	Z+2, r24	; 0x02
    22ee:	21 15       	cp	r18, r1
    22f0:	31 05       	cpc	r19, r1
    22f2:	29 f4       	brne	.+10     	; 0x22fe <free+0x92>
    22f4:	f0 93 74 03 	sts	0x0374, r31	; 0x800374 <__flp+0x1>
    22f8:	e0 93 73 03 	sts	0x0373, r30	; 0x800373 <__flp>
    22fc:	3d c0       	rjmp	.+122    	; 0x2378 <free+0x10c>
    22fe:	e9 01       	movw	r28, r18
    2300:	fb 83       	std	Y+3, r31	; 0x03
    2302:	ea 83       	std	Y+2, r30	; 0x02
    2304:	49 91       	ld	r20, Y+
    2306:	59 91       	ld	r21, Y+
    2308:	c4 0f       	add	r28, r20
    230a:	d5 1f       	adc	r29, r21
    230c:	ec 17       	cp	r30, r28
    230e:	fd 07       	cpc	r31, r29
    2310:	61 f4       	brne	.+24     	; 0x232a <free+0xbe>
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	84 0f       	add	r24, r20
    2318:	95 1f       	adc	r25, r21
    231a:	02 96       	adiw	r24, 0x02	; 2
    231c:	e9 01       	movw	r28, r18
    231e:	99 83       	std	Y+1, r25	; 0x01
    2320:	88 83       	st	Y, r24
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	9b 83       	std	Y+3, r25	; 0x03
    2328:	8a 83       	std	Y+2, r24	; 0x02
    232a:	e0 e0       	ldi	r30, 0x00	; 0
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	12 96       	adiw	r26, 0x02	; 2
    2330:	8d 91       	ld	r24, X+
    2332:	9c 91       	ld	r25, X
    2334:	13 97       	sbiw	r26, 0x03	; 3
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	19 f0       	breq	.+6      	; 0x2340 <free+0xd4>
    233a:	fd 01       	movw	r30, r26
    233c:	dc 01       	movw	r26, r24
    233e:	f7 cf       	rjmp	.-18     	; 0x232e <free+0xc2>
    2340:	8d 91       	ld	r24, X+
    2342:	9c 91       	ld	r25, X
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	9d 01       	movw	r18, r26
    2348:	2e 5f       	subi	r18, 0xFE	; 254
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
    234c:	82 0f       	add	r24, r18
    234e:	93 1f       	adc	r25, r19
    2350:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <__brkval>
    2354:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <__brkval+0x1>
    2358:	28 17       	cp	r18, r24
    235a:	39 07       	cpc	r19, r25
    235c:	69 f4       	brne	.+26     	; 0x2378 <free+0x10c>
    235e:	30 97       	sbiw	r30, 0x00	; 0
    2360:	29 f4       	brne	.+10     	; 0x236c <free+0x100>
    2362:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <__flp+0x1>
    2366:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <__flp>
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <free+0x104>
    236c:	13 82       	std	Z+3, r1	; 0x03
    236e:	12 82       	std	Z+2, r1	; 0x02
    2370:	b0 93 72 03 	sts	0x0372, r27	; 0x800372 <__brkval+0x1>
    2374:	a0 93 71 03 	sts	0x0371, r26	; 0x800371 <__brkval>
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	08 95       	ret

0000237e <realloc>:
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 ec       	ldi	r30, 0xC5	; 197
    2384:	f1 e1       	ldi	r31, 0x11	; 17
    2386:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__+0x8>
    238a:	ec 01       	movw	r28, r24
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	21 f4       	brne	.+8      	; 0x2398 <realloc+0x1a>
    2390:	cb 01       	movw	r24, r22
    2392:	0e 94 9e 10 	call	0x213c	; 0x213c <malloc>
    2396:	b4 c0       	rjmp	.+360    	; 0x2500 <realloc+0x182>
    2398:	fc 01       	movw	r30, r24
    239a:	e6 0f       	add	r30, r22
    239c:	f7 1f       	adc	r31, r23
    239e:	9c 01       	movw	r18, r24
    23a0:	22 50       	subi	r18, 0x02	; 2
    23a2:	31 09       	sbc	r19, r1
    23a4:	e2 17       	cp	r30, r18
    23a6:	f3 07       	cpc	r31, r19
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <realloc+0x2e>
    23aa:	a8 c0       	rjmp	.+336    	; 0x24fc <realloc+0x17e>
    23ac:	d9 01       	movw	r26, r18
    23ae:	0d 91       	ld	r16, X+
    23b0:	1c 91       	ld	r17, X
    23b2:	11 97       	sbiw	r26, 0x01	; 1
    23b4:	06 17       	cp	r16, r22
    23b6:	17 07       	cpc	r17, r23
    23b8:	b0 f0       	brcs	.+44     	; 0x23e6 <realloc+0x68>
    23ba:	05 30       	cpi	r16, 0x05	; 5
    23bc:	11 05       	cpc	r17, r1
    23be:	08 f4       	brcc	.+2      	; 0x23c2 <realloc+0x44>
    23c0:	9b c0       	rjmp	.+310    	; 0x24f8 <realloc+0x17a>
    23c2:	c8 01       	movw	r24, r16
    23c4:	04 97       	sbiw	r24, 0x04	; 4
    23c6:	86 17       	cp	r24, r22
    23c8:	97 07       	cpc	r25, r23
    23ca:	08 f4       	brcc	.+2      	; 0x23ce <realloc+0x50>
    23cc:	95 c0       	rjmp	.+298    	; 0x24f8 <realloc+0x17a>
    23ce:	02 50       	subi	r16, 0x02	; 2
    23d0:	11 09       	sbc	r17, r1
    23d2:	06 1b       	sub	r16, r22
    23d4:	17 0b       	sbc	r17, r23
    23d6:	01 93       	st	Z+, r16
    23d8:	11 93       	st	Z+, r17
    23da:	6d 93       	st	X+, r22
    23dc:	7c 93       	st	X, r23
    23de:	cf 01       	movw	r24, r30
    23e0:	0e 94 36 11 	call	0x226c	; 0x226c <free>
    23e4:	89 c0       	rjmp	.+274    	; 0x24f8 <realloc+0x17a>
    23e6:	5b 01       	movw	r10, r22
    23e8:	a0 1a       	sub	r10, r16
    23ea:	b1 0a       	sbc	r11, r17
    23ec:	4c 01       	movw	r8, r24
    23ee:	80 0e       	add	r8, r16
    23f0:	91 1e       	adc	r9, r17
    23f2:	a0 91 73 03 	lds	r26, 0x0373	; 0x800373 <__flp>
    23f6:	b0 91 74 03 	lds	r27, 0x0374	; 0x800374 <__flp+0x1>
    23fa:	61 2c       	mov	r6, r1
    23fc:	71 2c       	mov	r7, r1
    23fe:	e1 2c       	mov	r14, r1
    2400:	f1 2c       	mov	r15, r1
    2402:	10 97       	sbiw	r26, 0x00	; 0
    2404:	09 f4       	brne	.+2      	; 0x2408 <realloc+0x8a>
    2406:	46 c0       	rjmp	.+140    	; 0x2494 <realloc+0x116>
    2408:	8d 91       	ld	r24, X+
    240a:	9c 91       	ld	r25, X
    240c:	11 97       	sbiw	r26, 0x01	; 1
    240e:	a8 15       	cp	r26, r8
    2410:	b9 05       	cpc	r27, r9
    2412:	b1 f5       	brne	.+108    	; 0x2480 <realloc+0x102>
    2414:	6c 01       	movw	r12, r24
    2416:	42 e0       	ldi	r20, 0x02	; 2
    2418:	c4 0e       	add	r12, r20
    241a:	d1 1c       	adc	r13, r1
    241c:	ca 14       	cp	r12, r10
    241e:	db 04       	cpc	r13, r11
    2420:	78 f1       	brcs	.+94     	; 0x2480 <realloc+0x102>
    2422:	4c 01       	movw	r8, r24
    2424:	8a 18       	sub	r8, r10
    2426:	9b 08       	sbc	r9, r11
    2428:	64 01       	movw	r12, r8
    242a:	42 e0       	ldi	r20, 0x02	; 2
    242c:	c4 0e       	add	r12, r20
    242e:	d1 1c       	adc	r13, r1
    2430:	12 96       	adiw	r26, 0x02	; 2
    2432:	bc 90       	ld	r11, X
    2434:	12 97       	sbiw	r26, 0x02	; 2
    2436:	13 96       	adiw	r26, 0x03	; 3
    2438:	ac 91       	ld	r26, X
    243a:	b5 e0       	ldi	r27, 0x05	; 5
    243c:	cb 16       	cp	r12, r27
    243e:	d1 04       	cpc	r13, r1
    2440:	40 f0       	brcs	.+16     	; 0x2452 <realloc+0xd4>
    2442:	b2 82       	std	Z+2, r11	; 0x02
    2444:	a3 83       	std	Z+3, r26	; 0x03
    2446:	91 82       	std	Z+1, r9	; 0x01
    2448:	80 82       	st	Z, r8
    244a:	d9 01       	movw	r26, r18
    244c:	6d 93       	st	X+, r22
    244e:	7c 93       	st	X, r23
    2450:	09 c0       	rjmp	.+18     	; 0x2464 <realloc+0xe6>
    2452:	0e 5f       	subi	r16, 0xFE	; 254
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	80 0f       	add	r24, r16
    2458:	91 1f       	adc	r25, r17
    245a:	f9 01       	movw	r30, r18
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	eb 2d       	mov	r30, r11
    2462:	fa 2f       	mov	r31, r26
    2464:	e1 14       	cp	r14, r1
    2466:	f1 04       	cpc	r15, r1
    2468:	31 f0       	breq	.+12     	; 0x2476 <realloc+0xf8>
    246a:	d7 01       	movw	r26, r14
    246c:	13 96       	adiw	r26, 0x03	; 3
    246e:	fc 93       	st	X, r31
    2470:	ee 93       	st	-X, r30
    2472:	12 97       	sbiw	r26, 0x02	; 2
    2474:	41 c0       	rjmp	.+130    	; 0x24f8 <realloc+0x17a>
    2476:	f0 93 74 03 	sts	0x0374, r31	; 0x800374 <__flp+0x1>
    247a:	e0 93 73 03 	sts	0x0373, r30	; 0x800373 <__flp>
    247e:	3c c0       	rjmp	.+120    	; 0x24f8 <realloc+0x17a>
    2480:	68 16       	cp	r6, r24
    2482:	79 06       	cpc	r7, r25
    2484:	08 f4       	brcc	.+2      	; 0x2488 <realloc+0x10a>
    2486:	3c 01       	movw	r6, r24
    2488:	7d 01       	movw	r14, r26
    248a:	12 96       	adiw	r26, 0x02	; 2
    248c:	0d 90       	ld	r0, X+
    248e:	bc 91       	ld	r27, X
    2490:	a0 2d       	mov	r26, r0
    2492:	b7 cf       	rjmp	.-146    	; 0x2402 <realloc+0x84>
    2494:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <__brkval>
    2498:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <__brkval+0x1>
    249c:	88 16       	cp	r8, r24
    249e:	99 06       	cpc	r9, r25
    24a0:	e1 f4       	brne	.+56     	; 0x24da <realloc+0x15c>
    24a2:	66 16       	cp	r6, r22
    24a4:	77 06       	cpc	r7, r23
    24a6:	c8 f4       	brcc	.+50     	; 0x24da <realloc+0x15c>
    24a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    24ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	41 f4       	brne	.+16     	; 0x24c4 <realloc+0x146>
    24b4:	8d b7       	in	r24, 0x3d	; 61
    24b6:	9e b7       	in	r25, 0x3e	; 62
    24b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    24bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    24c0:	84 1b       	sub	r24, r20
    24c2:	95 0b       	sbc	r25, r21
    24c4:	e8 17       	cp	r30, r24
    24c6:	f9 07       	cpc	r31, r25
    24c8:	c8 f4       	brcc	.+50     	; 0x24fc <realloc+0x17e>
    24ca:	f0 93 72 03 	sts	0x0372, r31	; 0x800372 <__brkval+0x1>
    24ce:	e0 93 71 03 	sts	0x0371, r30	; 0x800371 <__brkval>
    24d2:	f9 01       	movw	r30, r18
    24d4:	71 83       	std	Z+1, r23	; 0x01
    24d6:	60 83       	st	Z, r22
    24d8:	0f c0       	rjmp	.+30     	; 0x24f8 <realloc+0x17a>
    24da:	cb 01       	movw	r24, r22
    24dc:	0e 94 9e 10 	call	0x213c	; 0x213c <malloc>
    24e0:	7c 01       	movw	r14, r24
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	59 f0       	breq	.+22     	; 0x24fc <realloc+0x17e>
    24e6:	a8 01       	movw	r20, r16
    24e8:	be 01       	movw	r22, r28
    24ea:	0e 94 92 12 	call	0x2524	; 0x2524 <memcpy>
    24ee:	ce 01       	movw	r24, r28
    24f0:	0e 94 36 11 	call	0x226c	; 0x226c <free>
    24f4:	c7 01       	movw	r24, r14
    24f6:	04 c0       	rjmp	.+8      	; 0x2500 <realloc+0x182>
    24f8:	ce 01       	movw	r24, r28
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <realloc+0x182>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	ee e0       	ldi	r30, 0x0E	; 14
    2506:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__+0x8>

0000250a <atof>:
    250a:	66 27       	eor	r22, r22
    250c:	77 27       	eor	r23, r23
    250e:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <strtod>

00002512 <isspace>:
    2512:	91 11       	cpse	r25, r1
    2514:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__ctype_isfalse>
    2518:	80 32       	cpi	r24, 0x20	; 32
    251a:	19 f0       	breq	.+6      	; 0x2522 <isspace+0x10>
    251c:	89 50       	subi	r24, 0x09	; 9
    251e:	85 50       	subi	r24, 0x05	; 5
    2520:	c8 f7       	brcc	.-14     	; 0x2514 <isspace+0x2>
    2522:	08 95       	ret

00002524 <memcpy>:
    2524:	fb 01       	movw	r30, r22
    2526:	dc 01       	movw	r26, r24
    2528:	02 c0       	rjmp	.+4      	; 0x252e <memcpy+0xa>
    252a:	01 90       	ld	r0, Z+
    252c:	0d 92       	st	X+, r0
    252e:	41 50       	subi	r20, 0x01	; 1
    2530:	50 40       	sbci	r21, 0x00	; 0
    2532:	d8 f7       	brcc	.-10     	; 0x252a <memcpy+0x6>
    2534:	08 95       	ret

00002536 <strcpy>:
    2536:	fb 01       	movw	r30, r22
    2538:	dc 01       	movw	r26, r24
    253a:	01 90       	ld	r0, Z+
    253c:	0d 92       	st	X+, r0
    253e:	00 20       	and	r0, r0
    2540:	e1 f7       	brne	.-8      	; 0x253a <strcpy+0x4>
    2542:	08 95       	ret

00002544 <strncmp>:
    2544:	fb 01       	movw	r30, r22
    2546:	dc 01       	movw	r26, r24
    2548:	41 50       	subi	r20, 0x01	; 1
    254a:	50 40       	sbci	r21, 0x00	; 0
    254c:	30 f0       	brcs	.+12     	; 0x255a <strncmp+0x16>
    254e:	8d 91       	ld	r24, X+
    2550:	01 90       	ld	r0, Z+
    2552:	80 19       	sub	r24, r0
    2554:	19 f4       	brne	.+6      	; 0x255c <strncmp+0x18>
    2556:	00 20       	and	r0, r0
    2558:	b9 f7       	brne	.-18     	; 0x2548 <strncmp+0x4>
    255a:	88 1b       	sub	r24, r24
    255c:	99 0b       	sbc	r25, r25
    255e:	08 95       	ret

00002560 <itoa>:
    2560:	45 32       	cpi	r20, 0x25	; 37
    2562:	51 05       	cpc	r21, r1
    2564:	20 f4       	brcc	.+8      	; 0x256e <itoa+0xe>
    2566:	42 30       	cpi	r20, 0x02	; 2
    2568:	10 f0       	brcs	.+4      	; 0x256e <itoa+0xe>
    256a:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__itoa_ncheck>
    256e:	fb 01       	movw	r30, r22
    2570:	10 82       	st	Z, r1
    2572:	cb 01       	movw	r24, r22
    2574:	08 95       	ret

00002576 <__itoa_ncheck>:
    2576:	bb 27       	eor	r27, r27
    2578:	4a 30       	cpi	r20, 0x0A	; 10
    257a:	31 f4       	brne	.+12     	; 0x2588 <__itoa_ncheck+0x12>
    257c:	99 23       	and	r25, r25
    257e:	22 f4       	brpl	.+8      	; 0x2588 <__itoa_ncheck+0x12>
    2580:	bd e2       	ldi	r27, 0x2D	; 45
    2582:	90 95       	com	r25
    2584:	81 95       	neg	r24
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__utoa_common>

0000258c <__utoa_ncheck>:
    258c:	bb 27       	eor	r27, r27

0000258e <__utoa_common>:
    258e:	fb 01       	movw	r30, r22
    2590:	55 27       	eor	r21, r21
    2592:	aa 27       	eor	r26, r26
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	aa 1f       	adc	r26, r26
    259a:	a4 17       	cp	r26, r20
    259c:	10 f0       	brcs	.+4      	; 0x25a2 <__utoa_common+0x14>
    259e:	a4 1b       	sub	r26, r20
    25a0:	83 95       	inc	r24
    25a2:	50 51       	subi	r21, 0x10	; 16
    25a4:	b9 f7       	brne	.-18     	; 0x2594 <__utoa_common+0x6>
    25a6:	a0 5d       	subi	r26, 0xD0	; 208
    25a8:	aa 33       	cpi	r26, 0x3A	; 58
    25aa:	08 f0       	brcs	.+2      	; 0x25ae <__utoa_common+0x20>
    25ac:	a9 5d       	subi	r26, 0xD9	; 217
    25ae:	a1 93       	st	Z+, r26
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	79 f7       	brne	.-34     	; 0x2592 <__utoa_common+0x4>
    25b4:	b1 11       	cpse	r27, r1
    25b6:	b1 93       	st	Z+, r27
    25b8:	11 92       	st	Z+, r1
    25ba:	cb 01       	movw	r24, r22
    25bc:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <strrev>

000025c0 <dtoa_prf>:
    25c0:	a9 e0       	ldi	r26, 0x09	; 9
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e6 ee       	ldi	r30, 0xE6	; 230
    25c6:	f2 e1       	ldi	r31, 0x12	; 18
    25c8:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0xc>
    25cc:	6a 01       	movw	r12, r20
    25ce:	12 2f       	mov	r17, r18
    25d0:	b0 2e       	mov	r11, r16
    25d2:	2b e3       	ldi	r18, 0x3B	; 59
    25d4:	20 17       	cp	r18, r16
    25d6:	20 f0       	brcs	.+8      	; 0x25e0 <dtoa_prf+0x20>
    25d8:	ff 24       	eor	r15, r15
    25da:	f3 94       	inc	r15
    25dc:	f0 0e       	add	r15, r16
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <dtoa_prf+0x24>
    25e0:	2c e3       	ldi	r18, 0x3C	; 60
    25e2:	f2 2e       	mov	r15, r18
    25e4:	0f 2d       	mov	r16, r15
    25e6:	27 e0       	ldi	r18, 0x07	; 7
    25e8:	ae 01       	movw	r20, r28
    25ea:	4f 5f       	subi	r20, 0xFF	; 255
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255
    25ee:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__ftoa_engine>
    25f2:	bc 01       	movw	r22, r24
    25f4:	49 81       	ldd	r20, Y+1	; 0x01
    25f6:	84 2f       	mov	r24, r20
    25f8:	89 70       	andi	r24, 0x09	; 9
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	31 f0       	breq	.+12     	; 0x260a <dtoa_prf+0x4a>
    25fe:	e1 fc       	sbrc	r14, 1
    2600:	06 c0       	rjmp	.+12     	; 0x260e <dtoa_prf+0x4e>
    2602:	e0 fe       	sbrs	r14, 0
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <dtoa_prf+0x52>
    2606:	90 e2       	ldi	r25, 0x20	; 32
    2608:	05 c0       	rjmp	.+10     	; 0x2614 <dtoa_prf+0x54>
    260a:	9d e2       	ldi	r25, 0x2D	; 45
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <dtoa_prf+0x54>
    260e:	9b e2       	ldi	r25, 0x2B	; 43
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <dtoa_prf+0x54>
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	5e 2d       	mov	r21, r14
    2616:	50 71       	andi	r21, 0x10	; 16
    2618:	43 ff       	sbrs	r20, 3
    261a:	3c c0       	rjmp	.+120    	; 0x2694 <dtoa_prf+0xd4>
    261c:	91 11       	cpse	r25, r1
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <dtoa_prf+0x64>
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <dtoa_prf+0x66>
    2624:	84 e0       	ldi	r24, 0x04	; 4
    2626:	81 17       	cp	r24, r17
    2628:	18 f4       	brcc	.+6      	; 0x2630 <dtoa_prf+0x70>
    262a:	21 2f       	mov	r18, r17
    262c:	28 1b       	sub	r18, r24
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <dtoa_prf+0x72>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	51 11       	cpse	r21, r1
    2634:	0b c0       	rjmp	.+22     	; 0x264c <dtoa_prf+0x8c>
    2636:	f6 01       	movw	r30, r12
    2638:	82 2f       	mov	r24, r18
    263a:	30 e2       	ldi	r19, 0x20	; 32
    263c:	88 23       	and	r24, r24
    263e:	19 f0       	breq	.+6      	; 0x2646 <dtoa_prf+0x86>
    2640:	31 93       	st	Z+, r19
    2642:	81 50       	subi	r24, 0x01	; 1
    2644:	fb cf       	rjmp	.-10     	; 0x263c <dtoa_prf+0x7c>
    2646:	c2 0e       	add	r12, r18
    2648:	d1 1c       	adc	r13, r1
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	99 23       	and	r25, r25
    264e:	29 f0       	breq	.+10     	; 0x265a <dtoa_prf+0x9a>
    2650:	d6 01       	movw	r26, r12
    2652:	9c 93       	st	X, r25
    2654:	f6 01       	movw	r30, r12
    2656:	31 96       	adiw	r30, 0x01	; 1
    2658:	6f 01       	movw	r12, r30
    265a:	c6 01       	movw	r24, r12
    265c:	03 96       	adiw	r24, 0x03	; 3
    265e:	e2 fe       	sbrs	r14, 2
    2660:	0a c0       	rjmp	.+20     	; 0x2676 <dtoa_prf+0xb6>
    2662:	3e e4       	ldi	r19, 0x4E	; 78
    2664:	d6 01       	movw	r26, r12
    2666:	3c 93       	st	X, r19
    2668:	41 e4       	ldi	r20, 0x41	; 65
    266a:	11 96       	adiw	r26, 0x01	; 1
    266c:	4c 93       	st	X, r20
    266e:	11 97       	sbiw	r26, 0x01	; 1
    2670:	12 96       	adiw	r26, 0x02	; 2
    2672:	3c 93       	st	X, r19
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <dtoa_prf+0xc2>
    2676:	3e e6       	ldi	r19, 0x6E	; 110
    2678:	f6 01       	movw	r30, r12
    267a:	30 83       	st	Z, r19
    267c:	41 e6       	ldi	r20, 0x61	; 97
    267e:	41 83       	std	Z+1, r20	; 0x01
    2680:	32 83       	std	Z+2, r19	; 0x02
    2682:	fc 01       	movw	r30, r24
    2684:	32 2f       	mov	r19, r18
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	33 23       	and	r19, r19
    268a:	09 f4       	brne	.+2      	; 0x268e <dtoa_prf+0xce>
    268c:	42 c0       	rjmp	.+132    	; 0x2712 <dtoa_prf+0x152>
    268e:	41 93       	st	Z+, r20
    2690:	31 50       	subi	r19, 0x01	; 1
    2692:	fa cf       	rjmp	.-12     	; 0x2688 <dtoa_prf+0xc8>
    2694:	42 ff       	sbrs	r20, 2
    2696:	44 c0       	rjmp	.+136    	; 0x2720 <dtoa_prf+0x160>
    2698:	91 11       	cpse	r25, r1
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <dtoa_prf+0xe0>
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <dtoa_prf+0xe2>
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	81 17       	cp	r24, r17
    26a4:	18 f4       	brcc	.+6      	; 0x26ac <dtoa_prf+0xec>
    26a6:	21 2f       	mov	r18, r17
    26a8:	28 1b       	sub	r18, r24
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <dtoa_prf+0xee>
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	51 11       	cpse	r21, r1
    26b0:	0b c0       	rjmp	.+22     	; 0x26c8 <dtoa_prf+0x108>
    26b2:	f6 01       	movw	r30, r12
    26b4:	82 2f       	mov	r24, r18
    26b6:	30 e2       	ldi	r19, 0x20	; 32
    26b8:	88 23       	and	r24, r24
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <dtoa_prf+0x102>
    26bc:	31 93       	st	Z+, r19
    26be:	81 50       	subi	r24, 0x01	; 1
    26c0:	fb cf       	rjmp	.-10     	; 0x26b8 <dtoa_prf+0xf8>
    26c2:	c2 0e       	add	r12, r18
    26c4:	d1 1c       	adc	r13, r1
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	99 23       	and	r25, r25
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <dtoa_prf+0x116>
    26cc:	d6 01       	movw	r26, r12
    26ce:	9c 93       	st	X, r25
    26d0:	f6 01       	movw	r30, r12
    26d2:	31 96       	adiw	r30, 0x01	; 1
    26d4:	6f 01       	movw	r12, r30
    26d6:	c6 01       	movw	r24, r12
    26d8:	03 96       	adiw	r24, 0x03	; 3
    26da:	e2 fe       	sbrs	r14, 2
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <dtoa_prf+0x134>
    26de:	39 e4       	ldi	r19, 0x49	; 73
    26e0:	d6 01       	movw	r26, r12
    26e2:	3c 93       	st	X, r19
    26e4:	3e e4       	ldi	r19, 0x4E	; 78
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	3c 93       	st	X, r19
    26ea:	11 97       	sbiw	r26, 0x01	; 1
    26ec:	36 e4       	ldi	r19, 0x46	; 70
    26ee:	12 96       	adiw	r26, 0x02	; 2
    26f0:	3c 93       	st	X, r19
    26f2:	07 c0       	rjmp	.+14     	; 0x2702 <dtoa_prf+0x142>
    26f4:	39 e6       	ldi	r19, 0x69	; 105
    26f6:	f6 01       	movw	r30, r12
    26f8:	30 83       	st	Z, r19
    26fa:	3e e6       	ldi	r19, 0x6E	; 110
    26fc:	31 83       	std	Z+1, r19	; 0x01
    26fe:	36 e6       	ldi	r19, 0x66	; 102
    2700:	32 83       	std	Z+2, r19	; 0x02
    2702:	fc 01       	movw	r30, r24
    2704:	32 2f       	mov	r19, r18
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	33 23       	and	r19, r19
    270a:	19 f0       	breq	.+6      	; 0x2712 <dtoa_prf+0x152>
    270c:	41 93       	st	Z+, r20
    270e:	31 50       	subi	r19, 0x01	; 1
    2710:	fb cf       	rjmp	.-10     	; 0x2708 <dtoa_prf+0x148>
    2712:	fc 01       	movw	r30, r24
    2714:	e2 0f       	add	r30, r18
    2716:	f1 1d       	adc	r31, r1
    2718:	10 82       	st	Z, r1
    271a:	8e ef       	ldi	r24, 0xFE	; 254
    271c:	9f ef       	ldi	r25, 0xFF	; 255
    271e:	a6 c0       	rjmp	.+332    	; 0x286c <dtoa_prf+0x2ac>
    2720:	21 e0       	ldi	r18, 0x01	; 1
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	91 11       	cpse	r25, r1
    2726:	02 c0       	rjmp	.+4      	; 0x272c <dtoa_prf+0x16c>
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	16 16       	cp	r1, r22
    272e:	17 06       	cpc	r1, r23
    2730:	1c f4       	brge	.+6      	; 0x2738 <dtoa_prf+0x178>
    2732:	fb 01       	movw	r30, r22
    2734:	31 96       	adiw	r30, 0x01	; 1
    2736:	02 c0       	rjmp	.+4      	; 0x273c <dtoa_prf+0x17c>
    2738:	e1 e0       	ldi	r30, 0x01	; 1
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	2e 0f       	add	r18, r30
    273e:	3f 1f       	adc	r19, r31
    2740:	bb 20       	and	r11, r11
    2742:	21 f0       	breq	.+8      	; 0x274c <dtoa_prf+0x18c>
    2744:	eb 2d       	mov	r30, r11
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	31 96       	adiw	r30, 0x01	; 1
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <dtoa_prf+0x190>
    274c:	e0 e0       	ldi	r30, 0x00	; 0
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	2e 0f       	add	r18, r30
    2752:	3f 1f       	adc	r19, r31
    2754:	e1 2f       	mov	r30, r17
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	2e 17       	cp	r18, r30
    275a:	3f 07       	cpc	r19, r31
    275c:	1c f4       	brge	.+6      	; 0x2764 <dtoa_prf+0x1a4>
    275e:	12 1b       	sub	r17, r18
    2760:	21 2f       	mov	r18, r17
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <dtoa_prf+0x1a6>
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	8e 2d       	mov	r24, r14
    2768:	88 71       	andi	r24, 0x18	; 24
    276a:	59 f4       	brne	.+22     	; 0x2782 <dtoa_prf+0x1c2>
    276c:	f6 01       	movw	r30, r12
    276e:	82 2f       	mov	r24, r18
    2770:	30 e2       	ldi	r19, 0x20	; 32
    2772:	88 23       	and	r24, r24
    2774:	19 f0       	breq	.+6      	; 0x277c <dtoa_prf+0x1bc>
    2776:	31 93       	st	Z+, r19
    2778:	81 50       	subi	r24, 0x01	; 1
    277a:	fb cf       	rjmp	.-10     	; 0x2772 <dtoa_prf+0x1b2>
    277c:	c2 0e       	add	r12, r18
    277e:	d1 1c       	adc	r13, r1
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	99 23       	and	r25, r25
    2784:	29 f0       	breq	.+10     	; 0x2790 <dtoa_prf+0x1d0>
    2786:	d6 01       	movw	r26, r12
    2788:	9c 93       	st	X, r25
    278a:	f6 01       	movw	r30, r12
    278c:	31 96       	adiw	r30, 0x01	; 1
    278e:	6f 01       	movw	r12, r30
    2790:	51 11       	cpse	r21, r1
    2792:	0b c0       	rjmp	.+22     	; 0x27aa <dtoa_prf+0x1ea>
    2794:	f6 01       	movw	r30, r12
    2796:	82 2f       	mov	r24, r18
    2798:	90 e3       	ldi	r25, 0x30	; 48
    279a:	88 23       	and	r24, r24
    279c:	19 f0       	breq	.+6      	; 0x27a4 <dtoa_prf+0x1e4>
    279e:	91 93       	st	Z+, r25
    27a0:	81 50       	subi	r24, 0x01	; 1
    27a2:	fb cf       	rjmp	.-10     	; 0x279a <dtoa_prf+0x1da>
    27a4:	c2 0e       	add	r12, r18
    27a6:	d1 1c       	adc	r13, r1
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	0f 2d       	mov	r16, r15
    27ac:	06 0f       	add	r16, r22
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	34 2f       	mov	r19, r20
    27b2:	30 71       	andi	r19, 0x10	; 16
    27b4:	44 ff       	sbrs	r20, 4
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <dtoa_prf+0x1fe>
    27b8:	91 33       	cpi	r25, 0x31	; 49
    27ba:	09 f4       	brne	.+2      	; 0x27be <dtoa_prf+0x1fe>
    27bc:	01 50       	subi	r16, 0x01	; 1
    27be:	10 16       	cp	r1, r16
    27c0:	24 f4       	brge	.+8      	; 0x27ca <dtoa_prf+0x20a>
    27c2:	09 30       	cpi	r16, 0x09	; 9
    27c4:	18 f0       	brcs	.+6      	; 0x27cc <dtoa_prf+0x20c>
    27c6:	08 e0       	ldi	r16, 0x08	; 8
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <dtoa_prf+0x20c>
    27ca:	01 e0       	ldi	r16, 0x01	; 1
    27cc:	ab 01       	movw	r20, r22
    27ce:	77 ff       	sbrs	r23, 7
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <dtoa_prf+0x216>
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	fb 01       	movw	r30, r22
    27d8:	e4 1b       	sub	r30, r20
    27da:	f5 0b       	sbc	r31, r21
    27dc:	a1 e0       	ldi	r26, 0x01	; 1
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	ac 0f       	add	r26, r28
    27e2:	bd 1f       	adc	r27, r29
    27e4:	ea 0f       	add	r30, r26
    27e6:	fb 1f       	adc	r31, r27
    27e8:	8e e2       	ldi	r24, 0x2E	; 46
    27ea:	a8 2e       	mov	r10, r24
    27ec:	4b 01       	movw	r8, r22
    27ee:	80 1a       	sub	r8, r16
    27f0:	91 08       	sbc	r9, r1
    27f2:	0b 2d       	mov	r16, r11
    27f4:	10 e0       	ldi	r17, 0x00	; 0
    27f6:	11 95       	neg	r17
    27f8:	01 95       	neg	r16
    27fa:	11 09       	sbc	r17, r1
    27fc:	4f 3f       	cpi	r20, 0xFF	; 255
    27fe:	bf ef       	ldi	r27, 0xFF	; 255
    2800:	5b 07       	cpc	r21, r27
    2802:	21 f4       	brne	.+8      	; 0x280c <dtoa_prf+0x24c>
    2804:	d6 01       	movw	r26, r12
    2806:	ac 92       	st	X, r10
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	6d 01       	movw	r12, r26
    280c:	64 17       	cp	r22, r20
    280e:	75 07       	cpc	r23, r21
    2810:	2c f0       	brlt	.+10     	; 0x281c <dtoa_prf+0x25c>
    2812:	84 16       	cp	r8, r20
    2814:	95 06       	cpc	r9, r21
    2816:	14 f4       	brge	.+4      	; 0x281c <dtoa_prf+0x25c>
    2818:	81 81       	ldd	r24, Z+1	; 0x01
    281a:	01 c0       	rjmp	.+2      	; 0x281e <dtoa_prf+0x25e>
    281c:	80 e3       	ldi	r24, 0x30	; 48
    281e:	41 50       	subi	r20, 0x01	; 1
    2820:	51 09       	sbc	r21, r1
    2822:	31 96       	adiw	r30, 0x01	; 1
    2824:	d6 01       	movw	r26, r12
    2826:	11 96       	adiw	r26, 0x01	; 1
    2828:	7d 01       	movw	r14, r26
    282a:	40 17       	cp	r20, r16
    282c:	51 07       	cpc	r21, r17
    282e:	24 f0       	brlt	.+8      	; 0x2838 <dtoa_prf+0x278>
    2830:	d6 01       	movw	r26, r12
    2832:	8c 93       	st	X, r24
    2834:	67 01       	movw	r12, r14
    2836:	e2 cf       	rjmp	.-60     	; 0x27fc <dtoa_prf+0x23c>
    2838:	64 17       	cp	r22, r20
    283a:	75 07       	cpc	r23, r21
    283c:	39 f4       	brne	.+14     	; 0x284c <dtoa_prf+0x28c>
    283e:	96 33       	cpi	r25, 0x36	; 54
    2840:	20 f4       	brcc	.+8      	; 0x284a <dtoa_prf+0x28a>
    2842:	95 33       	cpi	r25, 0x35	; 53
    2844:	19 f4       	brne	.+6      	; 0x284c <dtoa_prf+0x28c>
    2846:	31 11       	cpse	r19, r1
    2848:	01 c0       	rjmp	.+2      	; 0x284c <dtoa_prf+0x28c>
    284a:	81 e3       	ldi	r24, 0x31	; 49
    284c:	f6 01       	movw	r30, r12
    284e:	80 83       	st	Z, r24
    2850:	f7 01       	movw	r30, r14
    2852:	82 2f       	mov	r24, r18
    2854:	90 e2       	ldi	r25, 0x20	; 32
    2856:	88 23       	and	r24, r24
    2858:	19 f0       	breq	.+6      	; 0x2860 <dtoa_prf+0x2a0>
    285a:	91 93       	st	Z+, r25
    285c:	81 50       	subi	r24, 0x01	; 1
    285e:	fb cf       	rjmp	.-10     	; 0x2856 <dtoa_prf+0x296>
    2860:	f7 01       	movw	r30, r14
    2862:	e2 0f       	add	r30, r18
    2864:	f1 1d       	adc	r31, r1
    2866:	10 82       	st	Z, r1
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	29 96       	adiw	r28, 0x09	; 9
    286e:	ec e0       	ldi	r30, 0x0C	; 12
    2870:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0xc>

00002874 <strtod>:
    2874:	a0 e0       	ldi	r26, 0x00	; 0
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e0 e4       	ldi	r30, 0x40	; 64
    287a:	f4 e1       	ldi	r31, 0x14	; 20
    287c:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0xc>
    2880:	ec 01       	movw	r28, r24
    2882:	6b 01       	movw	r12, r22
    2884:	61 15       	cp	r22, r1
    2886:	71 05       	cpc	r23, r1
    2888:	19 f0       	breq	.+6      	; 0x2890 <strtod+0x1c>
    288a:	fb 01       	movw	r30, r22
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	7e 01       	movw	r14, r28
    2892:	ff ef       	ldi	r31, 0xFF	; 255
    2894:	ef 1a       	sub	r14, r31
    2896:	ff 0a       	sbc	r15, r31
    2898:	08 81       	ld	r16, Y
    289a:	80 2f       	mov	r24, r16
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 89 12 	call	0x2512	; 0x2512 <isspace>
    28a2:	89 2b       	or	r24, r25
    28a4:	11 f0       	breq	.+4      	; 0x28aa <strtod+0x36>
    28a6:	e7 01       	movw	r28, r14
    28a8:	f3 cf       	rjmp	.-26     	; 0x2890 <strtod+0x1c>
    28aa:	0d 32       	cpi	r16, 0x2D	; 45
    28ac:	39 f4       	brne	.+14     	; 0x28bc <strtod+0x48>
    28ae:	7e 01       	movw	r14, r28
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	e8 0e       	add	r14, r24
    28b4:	f1 1c       	adc	r15, r1
    28b6:	09 81       	ldd	r16, Y+1	; 0x01
    28b8:	11 e0       	ldi	r17, 0x01	; 1
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <strtod+0x58>
    28bc:	0b 32       	cpi	r16, 0x2B	; 43
    28be:	29 f4       	brne	.+10     	; 0x28ca <strtod+0x56>
    28c0:	7e 01       	movw	r14, r28
    28c2:	92 e0       	ldi	r25, 0x02	; 2
    28c4:	e9 0e       	add	r14, r25
    28c6:	f1 1c       	adc	r15, r1
    28c8:	09 81       	ldd	r16, Y+1	; 0x01
    28ca:	10 e0       	ldi	r17, 0x00	; 0
    28cc:	e7 01       	movw	r28, r14
    28ce:	21 97       	sbiw	r28, 0x01	; 1
    28d0:	43 e0       	ldi	r20, 0x03	; 3
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	60 e7       	ldi	r22, 0x70	; 112
    28d6:	70 e0       	ldi	r23, 0x00	; 0
    28d8:	ce 01       	movw	r24, r28
    28da:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strncasecmp_P>
    28de:	89 2b       	or	r24, r25
    28e0:	c1 f4       	brne	.+48     	; 0x2912 <strtod+0x9e>
    28e2:	23 96       	adiw	r28, 0x03	; 3
    28e4:	45 e0       	ldi	r20, 0x05	; 5
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	6b e6       	ldi	r22, 0x6B	; 107
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	ce 01       	movw	r24, r28
    28ee:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strncasecmp_P>
    28f2:	89 2b       	or	r24, r25
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <strtod+0x84>
    28f6:	25 96       	adiw	r28, 0x05	; 5
    28f8:	c1 14       	cp	r12, r1
    28fa:	d1 04       	cpc	r13, r1
    28fc:	19 f0       	breq	.+6      	; 0x2904 <strtod+0x90>
    28fe:	f6 01       	movw	r30, r12
    2900:	d1 83       	std	Z+1, r29	; 0x01
    2902:	c0 83       	st	Z, r28
    2904:	11 11       	cpse	r17, r1
    2906:	f6 c0       	rjmp	.+492    	; 0x2af4 <strtod+0x280>
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	70 e0       	ldi	r23, 0x00	; 0
    290c:	80 e8       	ldi	r24, 0x80	; 128
    290e:	9f e7       	ldi	r25, 0x7F	; 127
    2910:	fa c0       	rjmp	.+500    	; 0x2b06 <strtod+0x292>
    2912:	43 e0       	ldi	r20, 0x03	; 3
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	68 e6       	ldi	r22, 0x68	; 104
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	ce 01       	movw	r24, r28
    291c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <strncasecmp_P>
    2920:	89 2b       	or	r24, r25
    2922:	59 f4       	brne	.+22     	; 0x293a <strtod+0xc6>
    2924:	c1 14       	cp	r12, r1
    2926:	d1 04       	cpc	r13, r1
    2928:	09 f4       	brne	.+2      	; 0x292c <strtod+0xb8>
    292a:	e9 c0       	rjmp	.+466    	; 0x2afe <strtod+0x28a>
    292c:	f2 e0       	ldi	r31, 0x02	; 2
    292e:	ef 0e       	add	r14, r31
    2930:	f1 1c       	adc	r15, r1
    2932:	f6 01       	movw	r30, r12
    2934:	f1 82       	std	Z+1, r15	; 0x01
    2936:	e0 82       	st	Z, r14
    2938:	e2 c0       	rjmp	.+452    	; 0x2afe <strtod+0x28a>
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	a9 01       	movw	r20, r18
    2940:	c0 e0       	ldi	r28, 0x00	; 0
    2942:	d0 e0       	ldi	r29, 0x00	; 0
    2944:	f7 01       	movw	r30, r14
    2946:	80 ed       	ldi	r24, 0xD0	; 208
    2948:	a8 2e       	mov	r10, r24
    294a:	a0 0e       	add	r10, r16
    294c:	89 e0       	ldi	r24, 0x09	; 9
    294e:	8a 15       	cp	r24, r10
    2950:	30 f1       	brcs	.+76     	; 0x299e <strtod+0x12a>
    2952:	91 2f       	mov	r25, r17
    2954:	92 60       	ori	r25, 0x02	; 2
    2956:	b9 2e       	mov	r11, r25
    2958:	81 2f       	mov	r24, r17
    295a:	88 70       	andi	r24, 0x08	; 8
    295c:	12 ff       	sbrs	r17, 2
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <strtod+0xf4>
    2960:	81 11       	cpse	r24, r1
    2962:	24 c0       	rjmp	.+72     	; 0x29ac <strtod+0x138>
    2964:	21 96       	adiw	r28, 0x01	; 1
    2966:	22 c0       	rjmp	.+68     	; 0x29ac <strtod+0x138>
    2968:	81 11       	cpse	r24, r1
    296a:	21 97       	sbiw	r28, 0x01	; 1
    296c:	a5 e0       	ldi	r26, 0x05	; 5
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__muluhisi3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	aa 1f       	adc	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	9c 01       	movw	r18, r24
    2982:	ad 01       	movw	r20, r26
    2984:	2a 0d       	add	r18, r10
    2986:	31 1d       	adc	r19, r1
    2988:	41 1d       	adc	r20, r1
    298a:	51 1d       	adc	r21, r1
    298c:	28 39       	cpi	r18, 0x98	; 152
    298e:	89 e9       	ldi	r24, 0x99	; 153
    2990:	38 07       	cpc	r19, r24
    2992:	48 07       	cpc	r20, r24
    2994:	89 e1       	ldi	r24, 0x19	; 25
    2996:	58 07       	cpc	r21, r24
    2998:	48 f0       	brcs	.+18     	; 0x29ac <strtod+0x138>
    299a:	16 60       	ori	r17, 0x06	; 6
    299c:	06 c0       	rjmp	.+12     	; 0x29aa <strtod+0x136>
    299e:	9e ef       	ldi	r25, 0xFE	; 254
    29a0:	a9 12       	cpse	r10, r25
    29a2:	0a c0       	rjmp	.+20     	; 0x29b8 <strtod+0x144>
    29a4:	13 fd       	sbrc	r17, 3
    29a6:	40 c0       	rjmp	.+128    	; 0x2a28 <strtod+0x1b4>
    29a8:	18 60       	ori	r17, 0x08	; 8
    29aa:	b1 2e       	mov	r11, r17
    29ac:	8f ef       	ldi	r24, 0xFF	; 255
    29ae:	e8 1a       	sub	r14, r24
    29b0:	f8 0a       	sbc	r15, r24
    29b2:	00 81       	ld	r16, Z
    29b4:	1b 2d       	mov	r17, r11
    29b6:	c6 cf       	rjmp	.-116    	; 0x2944 <strtod+0xd0>
    29b8:	80 2f       	mov	r24, r16
    29ba:	8f 7d       	andi	r24, 0xDF	; 223
    29bc:	85 34       	cpi	r24, 0x45	; 69
    29be:	a1 f5       	brne	.+104    	; 0x2a28 <strtod+0x1b4>
    29c0:	80 81       	ld	r24, Z
    29c2:	8d 32       	cpi	r24, 0x2D	; 45
    29c4:	11 f4       	brne	.+4      	; 0x29ca <strtod+0x156>
    29c6:	10 61       	ori	r17, 0x10	; 16
    29c8:	06 c0       	rjmp	.+12     	; 0x29d6 <strtod+0x162>
    29ca:	8b 32       	cpi	r24, 0x2B	; 43
    29cc:	21 f0       	breq	.+8      	; 0x29d6 <strtod+0x162>
    29ce:	31 96       	adiw	r30, 0x01	; 1
    29d0:	61 e0       	ldi	r22, 0x01	; 1
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	04 c0       	rjmp	.+8      	; 0x29de <strtod+0x16a>
    29d6:	81 81       	ldd	r24, Z+1	; 0x01
    29d8:	32 96       	adiw	r30, 0x02	; 2
    29da:	62 e0       	ldi	r22, 0x02	; 2
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	80 53       	subi	r24, 0x30	; 48
    29e0:	8a 30       	cpi	r24, 0x0A	; 10
    29e2:	18 f0       	brcs	.+6      	; 0x29ea <strtod+0x176>
    29e4:	e6 1b       	sub	r30, r22
    29e6:	f7 0b       	sbc	r31, r23
    29e8:	1f c0       	rjmp	.+62     	; 0x2a28 <strtod+0x1b4>
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	70 e0       	ldi	r23, 0x00	; 0
    29ee:	60 38       	cpi	r22, 0x80	; 128
    29f0:	9c e0       	ldi	r25, 0x0C	; 12
    29f2:	79 07       	cpc	r23, r25
    29f4:	5c f4       	brge	.+22     	; 0x2a0c <strtod+0x198>
    29f6:	db 01       	movw	r26, r22
    29f8:	aa 0f       	add	r26, r26
    29fa:	bb 1f       	adc	r27, r27
    29fc:	aa 0f       	add	r26, r26
    29fe:	bb 1f       	adc	r27, r27
    2a00:	6a 0f       	add	r22, r26
    2a02:	7b 1f       	adc	r23, r27
    2a04:	66 0f       	add	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	68 0f       	add	r22, r24
    2a0a:	71 1d       	adc	r23, r1
    2a0c:	31 96       	adiw	r30, 0x01	; 1
    2a0e:	df 01       	movw	r26, r30
    2a10:	11 97       	sbiw	r26, 0x01	; 1
    2a12:	8c 91       	ld	r24, X
    2a14:	80 53       	subi	r24, 0x30	; 48
    2a16:	8a 30       	cpi	r24, 0x0A	; 10
    2a18:	50 f3       	brcs	.-44     	; 0x29ee <strtod+0x17a>
    2a1a:	14 ff       	sbrs	r17, 4
    2a1c:	03 c0       	rjmp	.+6      	; 0x2a24 <strtod+0x1b0>
    2a1e:	71 95       	neg	r23
    2a20:	61 95       	neg	r22
    2a22:	71 09       	sbc	r23, r1
    2a24:	c6 0f       	add	r28, r22
    2a26:	d7 1f       	adc	r29, r23
    2a28:	11 ff       	sbrs	r17, 1
    2a2a:	08 c0       	rjmp	.+16     	; 0x2a3c <strtod+0x1c8>
    2a2c:	c1 14       	cp	r12, r1
    2a2e:	d1 04       	cpc	r13, r1
    2a30:	29 f0       	breq	.+10     	; 0x2a3c <strtod+0x1c8>
    2a32:	cf 01       	movw	r24, r30
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f6 01       	movw	r30, r12
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	ca 01       	movw	r24, r20
    2a3e:	b9 01       	movw	r22, r18
    2a40:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__floatunsisf>
    2a44:	21 2f       	mov	r18, r17
    2a46:	23 70       	andi	r18, 0x03	; 3
    2a48:	23 30       	cpi	r18, 0x03	; 3
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <strtod+0x1de>
    2a4c:	4b 01       	movw	r8, r22
    2a4e:	5c 01       	movw	r10, r24
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <strtod+0x1ea>
    2a52:	4b 01       	movw	r8, r22
    2a54:	5c 01       	movw	r10, r24
    2a56:	b7 fa       	bst	r11, 7
    2a58:	b0 94       	com	r11
    2a5a:	b7 f8       	bld	r11, 7
    2a5c:	b0 94       	com	r11
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	a9 01       	movw	r20, r18
    2a64:	c5 01       	movw	r24, r10
    2a66:	b4 01       	movw	r22, r8
    2a68:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__cmpsf2>
    2a6c:	88 23       	and	r24, r24
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <strtod+0x1fe>
    2a70:	3e c0       	rjmp	.+124    	; 0x2aee <strtod+0x27a>
    2a72:	d7 ff       	sbrs	r29, 7
    2a74:	06 c0       	rjmp	.+12     	; 0x2a82 <strtod+0x20e>
    2a76:	d1 95       	neg	r29
    2a78:	c1 95       	neg	r28
    2a7a:	d1 09       	sbc	r29, r1
    2a7c:	07 e8       	ldi	r16, 0x87	; 135
    2a7e:	10 e0       	ldi	r17, 0x00	; 0
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <strtod+0x212>
    2a82:	0f e9       	ldi	r16, 0x9F	; 159
    2a84:	10 e0       	ldi	r17, 0x00	; 0
    2a86:	68 01       	movw	r12, r16
    2a88:	f8 e1       	ldi	r31, 0x18	; 24
    2a8a:	cf 1a       	sub	r12, r31
    2a8c:	d1 08       	sbc	r13, r1
    2a8e:	90 e2       	ldi	r25, 0x20	; 32
    2a90:	e9 2e       	mov	r14, r25
    2a92:	f1 2c       	mov	r15, r1
    2a94:	ce 15       	cp	r28, r14
    2a96:	df 05       	cpc	r29, r15
    2a98:	74 f0       	brlt	.+28     	; 0x2ab6 <strtod+0x242>
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	25 91       	lpm	r18, Z+
    2a9e:	35 91       	lpm	r19, Z+
    2aa0:	45 91       	lpm	r20, Z+
    2aa2:	54 91       	lpm	r21, Z
    2aa4:	c5 01       	movw	r24, r10
    2aa6:	b4 01       	movw	r22, r8
    2aa8:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__mulsf3>
    2aac:	4b 01       	movw	r8, r22
    2aae:	5c 01       	movw	r10, r24
    2ab0:	ce 19       	sub	r28, r14
    2ab2:	df 09       	sbc	r29, r15
    2ab4:	ef cf       	rjmp	.-34     	; 0x2a94 <strtod+0x220>
    2ab6:	04 50       	subi	r16, 0x04	; 4
    2ab8:	11 09       	sbc	r17, r1
    2aba:	f5 94       	asr	r15
    2abc:	e7 94       	ror	r14
    2abe:	0c 15       	cp	r16, r12
    2ac0:	1d 05       	cpc	r17, r13
    2ac2:	41 f7       	brne	.-48     	; 0x2a94 <strtod+0x220>
    2ac4:	8a 2d       	mov	r24, r10
    2ac6:	88 0f       	add	r24, r24
    2ac8:	8b 2d       	mov	r24, r11
    2aca:	88 1f       	adc	r24, r24
    2acc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ace:	49 f0       	breq	.+18     	; 0x2ae2 <strtod+0x26e>
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	c5 01       	movw	r24, r10
    2ad8:	b4 01       	movw	r22, r8
    2ada:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__cmpsf2>
    2ade:	81 11       	cpse	r24, r1
    2ae0:	06 c0       	rjmp	.+12     	; 0x2aee <strtod+0x27a>
    2ae2:	82 e2       	ldi	r24, 0x22	; 34
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <errno+0x1>
    2aea:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <errno>
    2aee:	c5 01       	movw	r24, r10
    2af0:	b4 01       	movw	r22, r8
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <strtod+0x292>
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	80 e8       	ldi	r24, 0x80	; 128
    2afa:	9f ef       	ldi	r25, 0xFF	; 255
    2afc:	04 c0       	rjmp	.+8      	; 0x2b06 <strtod+0x292>
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	80 ec       	ldi	r24, 0xC0	; 192
    2b04:	9f e7       	ldi	r25, 0x7F	; 127
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	ec e0       	ldi	r30, 0x0C	; 12
    2b0c:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0xc>

00002b10 <__ftoa_engine>:
    2b10:	28 30       	cpi	r18, 0x08	; 8
    2b12:	08 f0       	brcs	.+2      	; 0x2b16 <__ftoa_engine+0x6>
    2b14:	27 e0       	ldi	r18, 0x07	; 7
    2b16:	33 27       	eor	r19, r19
    2b18:	da 01       	movw	r26, r20
    2b1a:	99 0f       	add	r25, r25
    2b1c:	31 1d       	adc	r19, r1
    2b1e:	87 fd       	sbrc	r24, 7
    2b20:	91 60       	ori	r25, 0x01	; 1
    2b22:	00 96       	adiw	r24, 0x00	; 0
    2b24:	61 05       	cpc	r22, r1
    2b26:	71 05       	cpc	r23, r1
    2b28:	39 f4       	brne	.+14     	; 0x2b38 <__ftoa_engine+0x28>
    2b2a:	32 60       	ori	r19, 0x02	; 2
    2b2c:	2e 5f       	subi	r18, 0xFE	; 254
    2b2e:	3d 93       	st	X+, r19
    2b30:	30 e3       	ldi	r19, 0x30	; 48
    2b32:	2a 95       	dec	r18
    2b34:	e1 f7       	brne	.-8      	; 0x2b2e <__ftoa_engine+0x1e>
    2b36:	08 95       	ret
    2b38:	9f 3f       	cpi	r25, 0xFF	; 255
    2b3a:	30 f0       	brcs	.+12     	; 0x2b48 <__ftoa_engine+0x38>
    2b3c:	80 38       	cpi	r24, 0x80	; 128
    2b3e:	71 05       	cpc	r23, r1
    2b40:	61 05       	cpc	r22, r1
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <__ftoa_engine+0x36>
    2b44:	3c 5f       	subi	r19, 0xFC	; 252
    2b46:	3c 5f       	subi	r19, 0xFC	; 252
    2b48:	3d 93       	st	X+, r19
    2b4a:	91 30       	cpi	r25, 0x01	; 1
    2b4c:	08 f0       	brcs	.+2      	; 0x2b50 <__ftoa_engine+0x40>
    2b4e:	80 68       	ori	r24, 0x80	; 128
    2b50:	91 1d       	adc	r25, r1
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	1f 93       	push	r17
    2b58:	0f 93       	push	r16
    2b5a:	ff 92       	push	r15
    2b5c:	ef 92       	push	r14
    2b5e:	19 2f       	mov	r17, r25
    2b60:	98 7f       	andi	r25, 0xF8	; 248
    2b62:	96 95       	lsr	r25
    2b64:	e9 2f       	mov	r30, r25
    2b66:	96 95       	lsr	r25
    2b68:	96 95       	lsr	r25
    2b6a:	e9 0f       	add	r30, r25
    2b6c:	ff 27       	eor	r31, r31
    2b6e:	e3 50       	subi	r30, 0x03	; 3
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	99 27       	eor	r25, r25
    2b74:	33 27       	eor	r19, r19
    2b76:	ee 24       	eor	r14, r14
    2b78:	ff 24       	eor	r15, r15
    2b7a:	a7 01       	movw	r20, r14
    2b7c:	e7 01       	movw	r28, r14
    2b7e:	05 90       	lpm	r0, Z+
    2b80:	08 94       	sec
    2b82:	07 94       	ror	r0
    2b84:	28 f4       	brcc	.+10     	; 0x2b90 <__ftoa_engine+0x80>
    2b86:	36 0f       	add	r19, r22
    2b88:	e7 1e       	adc	r14, r23
    2b8a:	f8 1e       	adc	r15, r24
    2b8c:	49 1f       	adc	r20, r25
    2b8e:	51 1d       	adc	r21, r1
    2b90:	66 0f       	add	r22, r22
    2b92:	77 1f       	adc	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	06 94       	lsr	r0
    2b9a:	a1 f7       	brne	.-24     	; 0x2b84 <__ftoa_engine+0x74>
    2b9c:	05 90       	lpm	r0, Z+
    2b9e:	07 94       	ror	r0
    2ba0:	28 f4       	brcc	.+10     	; 0x2bac <__ftoa_engine+0x9c>
    2ba2:	e7 0e       	add	r14, r23
    2ba4:	f8 1e       	adc	r15, r24
    2ba6:	49 1f       	adc	r20, r25
    2ba8:	56 1f       	adc	r21, r22
    2baa:	c1 1d       	adc	r28, r1
    2bac:	77 0f       	add	r23, r23
    2bae:	88 1f       	adc	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	66 1f       	adc	r22, r22
    2bb4:	06 94       	lsr	r0
    2bb6:	a1 f7       	brne	.-24     	; 0x2ba0 <__ftoa_engine+0x90>
    2bb8:	05 90       	lpm	r0, Z+
    2bba:	07 94       	ror	r0
    2bbc:	28 f4       	brcc	.+10     	; 0x2bc8 <__ftoa_engine+0xb8>
    2bbe:	f8 0e       	add	r15, r24
    2bc0:	49 1f       	adc	r20, r25
    2bc2:	56 1f       	adc	r21, r22
    2bc4:	c7 1f       	adc	r28, r23
    2bc6:	d1 1d       	adc	r29, r1
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	06 94       	lsr	r0
    2bd2:	a1 f7       	brne	.-24     	; 0x2bbc <__ftoa_engine+0xac>
    2bd4:	05 90       	lpm	r0, Z+
    2bd6:	07 94       	ror	r0
    2bd8:	20 f4       	brcc	.+8      	; 0x2be2 <__ftoa_engine+0xd2>
    2bda:	49 0f       	add	r20, r25
    2bdc:	56 1f       	adc	r21, r22
    2bde:	c7 1f       	adc	r28, r23
    2be0:	d8 1f       	adc	r29, r24
    2be2:	99 0f       	add	r25, r25
    2be4:	66 1f       	adc	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	88 1f       	adc	r24, r24
    2bea:	06 94       	lsr	r0
    2bec:	a9 f7       	brne	.-22     	; 0x2bd8 <__ftoa_engine+0xc8>
    2bee:	84 91       	lpm	r24, Z
    2bf0:	10 95       	com	r17
    2bf2:	17 70       	andi	r17, 0x07	; 7
    2bf4:	41 f0       	breq	.+16     	; 0x2c06 <__ftoa_engine+0xf6>
    2bf6:	d6 95       	lsr	r29
    2bf8:	c7 95       	ror	r28
    2bfa:	57 95       	ror	r21
    2bfc:	47 95       	ror	r20
    2bfe:	f7 94       	ror	r15
    2c00:	e7 94       	ror	r14
    2c02:	1a 95       	dec	r17
    2c04:	c1 f7       	brne	.-16     	; 0x2bf6 <__ftoa_engine+0xe6>
    2c06:	e3 ea       	ldi	r30, 0xA3	; 163
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	68 94       	set
    2c0c:	15 90       	lpm	r1, Z+
    2c0e:	15 91       	lpm	r17, Z+
    2c10:	35 91       	lpm	r19, Z+
    2c12:	65 91       	lpm	r22, Z+
    2c14:	95 91       	lpm	r25, Z+
    2c16:	05 90       	lpm	r0, Z+
    2c18:	7f e2       	ldi	r23, 0x2F	; 47
    2c1a:	73 95       	inc	r23
    2c1c:	e1 18       	sub	r14, r1
    2c1e:	f1 0a       	sbc	r15, r17
    2c20:	43 0b       	sbc	r20, r19
    2c22:	56 0b       	sbc	r21, r22
    2c24:	c9 0b       	sbc	r28, r25
    2c26:	d0 09       	sbc	r29, r0
    2c28:	c0 f7       	brcc	.-16     	; 0x2c1a <__ftoa_engine+0x10a>
    2c2a:	e1 0c       	add	r14, r1
    2c2c:	f1 1e       	adc	r15, r17
    2c2e:	43 1f       	adc	r20, r19
    2c30:	56 1f       	adc	r21, r22
    2c32:	c9 1f       	adc	r28, r25
    2c34:	d0 1d       	adc	r29, r0
    2c36:	7e f4       	brtc	.+30     	; 0x2c56 <__ftoa_engine+0x146>
    2c38:	70 33       	cpi	r23, 0x30	; 48
    2c3a:	11 f4       	brne	.+4      	; 0x2c40 <__ftoa_engine+0x130>
    2c3c:	8a 95       	dec	r24
    2c3e:	e6 cf       	rjmp	.-52     	; 0x2c0c <__ftoa_engine+0xfc>
    2c40:	e8 94       	clt
    2c42:	01 50       	subi	r16, 0x01	; 1
    2c44:	30 f0       	brcs	.+12     	; 0x2c52 <__ftoa_engine+0x142>
    2c46:	08 0f       	add	r16, r24
    2c48:	0a f4       	brpl	.+2      	; 0x2c4c <__ftoa_engine+0x13c>
    2c4a:	00 27       	eor	r16, r16
    2c4c:	02 17       	cp	r16, r18
    2c4e:	08 f4       	brcc	.+2      	; 0x2c52 <__ftoa_engine+0x142>
    2c50:	20 2f       	mov	r18, r16
    2c52:	23 95       	inc	r18
    2c54:	02 2f       	mov	r16, r18
    2c56:	7a 33       	cpi	r23, 0x3A	; 58
    2c58:	28 f0       	brcs	.+10     	; 0x2c64 <__ftoa_engine+0x154>
    2c5a:	79 e3       	ldi	r23, 0x39	; 57
    2c5c:	7d 93       	st	X+, r23
    2c5e:	2a 95       	dec	r18
    2c60:	e9 f7       	brne	.-6      	; 0x2c5c <__ftoa_engine+0x14c>
    2c62:	10 c0       	rjmp	.+32     	; 0x2c84 <__ftoa_engine+0x174>
    2c64:	7d 93       	st	X+, r23
    2c66:	2a 95       	dec	r18
    2c68:	89 f6       	brne	.-94     	; 0x2c0c <__ftoa_engine+0xfc>
    2c6a:	06 94       	lsr	r0
    2c6c:	97 95       	ror	r25
    2c6e:	67 95       	ror	r22
    2c70:	37 95       	ror	r19
    2c72:	17 95       	ror	r17
    2c74:	17 94       	ror	r1
    2c76:	e1 18       	sub	r14, r1
    2c78:	f1 0a       	sbc	r15, r17
    2c7a:	43 0b       	sbc	r20, r19
    2c7c:	56 0b       	sbc	r21, r22
    2c7e:	c9 0b       	sbc	r28, r25
    2c80:	d0 09       	sbc	r29, r0
    2c82:	98 f0       	brcs	.+38     	; 0x2caa <__ftoa_engine+0x19a>
    2c84:	23 95       	inc	r18
    2c86:	7e 91       	ld	r23, -X
    2c88:	73 95       	inc	r23
    2c8a:	7a 33       	cpi	r23, 0x3A	; 58
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <__ftoa_engine+0x180>
    2c8e:	70 e3       	ldi	r23, 0x30	; 48
    2c90:	7c 93       	st	X, r23
    2c92:	20 13       	cpse	r18, r16
    2c94:	b8 f7       	brcc	.-18     	; 0x2c84 <__ftoa_engine+0x174>
    2c96:	7e 91       	ld	r23, -X
    2c98:	70 61       	ori	r23, 0x10	; 16
    2c9a:	7d 93       	st	X+, r23
    2c9c:	30 f0       	brcs	.+12     	; 0x2caa <__ftoa_engine+0x19a>
    2c9e:	83 95       	inc	r24
    2ca0:	71 e3       	ldi	r23, 0x31	; 49
    2ca2:	7d 93       	st	X+, r23
    2ca4:	70 e3       	ldi	r23, 0x30	; 48
    2ca6:	2a 95       	dec	r18
    2ca8:	e1 f7       	brne	.-8      	; 0x2ca2 <__ftoa_engine+0x192>
    2caa:	11 24       	eor	r1, r1
    2cac:	ef 90       	pop	r14
    2cae:	ff 90       	pop	r15
    2cb0:	0f 91       	pop	r16
    2cb2:	1f 91       	pop	r17
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	99 27       	eor	r25, r25
    2cba:	87 fd       	sbrc	r24, 7
    2cbc:	90 95       	com	r25
    2cbe:	08 95       	ret

00002cc0 <__ctype_isfalse>:
    2cc0:	99 27       	eor	r25, r25
    2cc2:	88 27       	eor	r24, r24

00002cc4 <__ctype_istrue>:
    2cc4:	08 95       	ret

00002cc6 <strncasecmp_P>:
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	dc 01       	movw	r26, r24
    2cca:	41 50       	subi	r20, 0x01	; 1
    2ccc:	50 40       	sbci	r21, 0x00	; 0
    2cce:	88 f0       	brcs	.+34     	; 0x2cf2 <strncasecmp_P+0x2c>
    2cd0:	8d 91       	ld	r24, X+
    2cd2:	81 34       	cpi	r24, 0x41	; 65
    2cd4:	1c f0       	brlt	.+6      	; 0x2cdc <strncasecmp_P+0x16>
    2cd6:	8b 35       	cpi	r24, 0x5B	; 91
    2cd8:	0c f4       	brge	.+2      	; 0x2cdc <strncasecmp_P+0x16>
    2cda:	80 5e       	subi	r24, 0xE0	; 224
    2cdc:	65 91       	lpm	r22, Z+
    2cde:	61 34       	cpi	r22, 0x41	; 65
    2ce0:	1c f0       	brlt	.+6      	; 0x2ce8 <strncasecmp_P+0x22>
    2ce2:	6b 35       	cpi	r22, 0x5B	; 91
    2ce4:	0c f4       	brge	.+2      	; 0x2ce8 <strncasecmp_P+0x22>
    2ce6:	60 5e       	subi	r22, 0xE0	; 224
    2ce8:	86 1b       	sub	r24, r22
    2cea:	61 11       	cpse	r22, r1
    2cec:	71 f3       	breq	.-36     	; 0x2cca <strncasecmp_P+0x4>
    2cee:	99 0b       	sbc	r25, r25
    2cf0:	08 95       	ret
    2cf2:	88 1b       	sub	r24, r24
    2cf4:	fc cf       	rjmp	.-8      	; 0x2cee <strncasecmp_P+0x28>

00002cf6 <strrev>:
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	67 2f       	mov	r22, r23
    2cfc:	71 91       	ld	r23, Z+
    2cfe:	77 23       	and	r23, r23
    2d00:	e1 f7       	brne	.-8      	; 0x2cfa <strrev+0x4>
    2d02:	32 97       	sbiw	r30, 0x02	; 2
    2d04:	04 c0       	rjmp	.+8      	; 0x2d0e <strrev+0x18>
    2d06:	7c 91       	ld	r23, X
    2d08:	6d 93       	st	X+, r22
    2d0a:	70 83       	st	Z, r23
    2d0c:	62 91       	ld	r22, -Z
    2d0e:	ae 17       	cp	r26, r30
    2d10:	bf 07       	cpc	r27, r31
    2d12:	c8 f3       	brcs	.-14     	; 0x2d06 <strrev+0x10>
    2d14:	08 95       	ret

00002d16 <__muluhisi3>:
    2d16:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__umulhisi3>
    2d1a:	a5 9f       	mul	r26, r21
    2d1c:	90 0d       	add	r25, r0
    2d1e:	b4 9f       	mul	r27, r20
    2d20:	90 0d       	add	r25, r0
    2d22:	a4 9f       	mul	r26, r20
    2d24:	80 0d       	add	r24, r0
    2d26:	91 1d       	adc	r25, r1
    2d28:	11 24       	eor	r1, r1
    2d2a:	08 95       	ret

00002d2c <__prologue_saves__>:
    2d2c:	2f 92       	push	r2
    2d2e:	3f 92       	push	r3
    2d30:	4f 92       	push	r4
    2d32:	5f 92       	push	r5
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	ca 1b       	sub	r28, r26
    2d56:	db 0b       	sbc	r29, r27
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	09 94       	ijmp

00002d64 <__epilogue_restores__>:
    2d64:	2a 88       	ldd	r2, Y+18	; 0x12
    2d66:	39 88       	ldd	r3, Y+17	; 0x11
    2d68:	48 88       	ldd	r4, Y+16	; 0x10
    2d6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d70:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d72:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d74:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d76:	b9 84       	ldd	r11, Y+9	; 0x09
    2d78:	c8 84       	ldd	r12, Y+8	; 0x08
    2d7a:	df 80       	ldd	r13, Y+7	; 0x07
    2d7c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d80:	0c 81       	ldd	r16, Y+4	; 0x04
    2d82:	1b 81       	ldd	r17, Y+3	; 0x03
    2d84:	aa 81       	ldd	r26, Y+2	; 0x02
    2d86:	b9 81       	ldd	r27, Y+1	; 0x01
    2d88:	ce 0f       	add	r28, r30
    2d8a:	d1 1d       	adc	r29, r1
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	ed 01       	movw	r28, r26
    2d98:	08 95       	ret

00002d9a <__umulhisi3>:
    2d9a:	a2 9f       	mul	r26, r18
    2d9c:	b0 01       	movw	r22, r0
    2d9e:	b3 9f       	mul	r27, r19
    2da0:	c0 01       	movw	r24, r0
    2da2:	a3 9f       	mul	r26, r19
    2da4:	70 0d       	add	r23, r0
    2da6:	81 1d       	adc	r24, r1
    2da8:	11 24       	eor	r1, r1
    2daa:	91 1d       	adc	r25, r1
    2dac:	b2 9f       	mul	r27, r18
    2dae:	70 0d       	add	r23, r0
    2db0:	81 1d       	adc	r24, r1
    2db2:	11 24       	eor	r1, r1
    2db4:	91 1d       	adc	r25, r1
    2db6:	08 95       	ret

00002db8 <__do_global_dtors>:
    2db8:	10 e0       	ldi	r17, 0x00	; 0
    2dba:	ca ef       	ldi	r28, 0xFA	; 250
    2dbc:	d0 e0       	ldi	r29, 0x00	; 0
    2dbe:	04 c0       	rjmp	.+8      	; 0x2dc8 <__do_global_dtors+0x10>
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__tablejump2__>
    2dc6:	21 96       	adiw	r28, 0x01	; 1
    2dc8:	cb 3f       	cpi	r28, 0xFB	; 251
    2dca:	d1 07       	cpc	r29, r17
    2dcc:	c9 f7       	brne	.-14     	; 0x2dc0 <__do_global_dtors+0x8>
    2dce:	f8 94       	cli

00002dd0 <__stop_program>:
    2dd0:	ff cf       	rjmp	.-2      	; 0x2dd0 <__stop_program>
